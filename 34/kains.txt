x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x

--- 第○章: デフラグさんの作り方 ---

著者：Kains

x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x


■0x01.) はじめに

　今回は私が自分のホームページ上に設置したデフラグさんというPHPで書いたプ
ログラムの作成過程を書いてみようと思う。この手のものは珍しいようで、狭い
見識ではあるが私の知る限りでは日経ソフトウェアの特集「誰も教えてくれない
プログラムの創り方」だけである。ちなみにデフラグさんとは、2ちゃんねるで使
われるアスキーアートである。「デフラグしました」が口癖で、人の発言を綺麗
に（意味のない言葉の並びに）並び替えてくれるのである。使用した言語はPHP。
私はUTF-8環境で試しているので、Shift-JIS等の環境の方は文字コードを指定す
る引数を適時変えてほしい。

　作成過程としたが、説明のため若干の順序の違いなどがあると思われる。
　2ちゃんねるを見ていると、たまに「入門書は読み終えたが何を作ればいいかわ
からない」という書き込みを見かける。私もそうだった。具体的に何かを作りた
いわけでもない。当然、アイデアもないので悩む。いつかすごいものを作れたら
いいなあ。


■0x02.) 並び替え基準

　まずどのように並び替えるかが肝である。やはり50音順かそれに近い精度が欲
しいところだ。しかし、まさかifやswitchでひとつひとつ条件分岐を書いていく
わけにもいかない。
　そこで、文字コードに目をつけた。文字コード、つまり文字に割り当てられた
番号を利用するのである。重複する文字コードはひとつもないので一意性が保た
れる。
　文字コードを使うアイデアが出たので試してみる。文字を引数にして、その文
字の文字コードを返すordという関数がPHPには備わっている。しかし、これには
問題がある。ord('あ')とord('い')を表示してみて欲しい。どちらも227と表示さ
れるのである（筆者はUTF-8環境で試している）。違う文字が同じ文字コードであ
ることはないので、ここはプログラマ側のミスかord関数あるいはPHPを疑うのが
妥当だろう。

　ところでPHPの関数を見ていると、文字列処理の関数に比べてマルチバイトに対
応した関数の少なさが目に付く。そこから、PHPはマルチバイトに弱いのではない
かという憶測がたつ。つまり、ord関数はマルチバイト文字には使えないのではな
いかと考える。そこで、$a="あ"; echo ord($a[0]).":".ord($a[1]); を試して欲
しい。私の環境では、227:129と出力された。227はord('あ')のそれと一致してい
る。どうやら2バイト目も文字コードを取得できているようだ。
　しかし、UTF-8はどうやら文字によってバイト数が違って一定ではないらしい。
どうにか手っ取り早い方法はないだろうか。そこで以下の関数は、マルチバイト
対応版ord関数である。ただし、私は文字コードの知識がないのでこの関数が返す
値を文字コードと呼んでいいのかはわからない。この数字を基準にソートをかけ
る。幸いにして、この自作ord関数では「あ」の次の文字コードは「ぁ」、その次
は「い」、その次は「ぃ」となる（UTF-8の環境）ので、50音順の並びが期待でき
る。

-----
function ord($n) {
	$sec = 0;
	$c = mb_substr($s, $n, 1, "UTF-8");
	$sec = ord($c);
	for ($i=1; $i<strlen($c); $i++) {
			$sec = $sec << 8;
			$sec += ord($c[$i]);
	}
	return $sec;
}
-----

　$sはクラスオブジェクトの変数である。
　同様に、このord関数も次に示すswap関数もクラスメンバーである。


■0x03.) 並び替え

　次に、並び替えを行うswap関数を用意する。すべての文字をコピーしてしまう
この関数はとても大きな無駄がある。

-----
function swap($a, $b) {
	$result = "";
	for ($i=0; $i<$strlen; $i++) {
		if ($i==$a) {
			$result .= mb_substr($s, $b, 1, "UTF-8");
			continue;
		}
		if ($i==$b) {
			$result .= mb_substr($s, $a, 1, "UTF-8");
			continue;
		}
		$result .= mb_substr($s, $i, 1, "UTF-8");
	}
	$s = $result;
}
-----

　後は並び替える関数を書けばいいのだが、何度もord関数で比較するのは無駄な
ので、最初に一回だけすべての文字をmb_substr関数で1文字ずつ拾ってord関数の
返り値を配列に格納し、それを比較するなどしてもよい。swap関数で入れ替えを
するときはこの配列の並びも入れ替えて整合性を保つようにする。


■0x04.) 最後に

　特に自分の趣味で作ったプログラムなら好きにこだわって作ることができる。
「”あぁいぃうぅ”という順番は嫌だ！ひらがなとカタカナの並びだけでもは全
部俺が決める！」というのもよし。プログラミングは手段であり、目的を的確に
実現するアルゴリズムを考えひらめくことはプログラマの最大級の愉しみである
ことを意識してほしい。


