x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x

--- 第○章: FLASHプレーヤーの改造 ---

著者：金床

x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x


■0x01.) はじめに

　攻撃者がDNSサーバーの設定変更をウェブページ上で動作するJavaScriptやJav
aアプレット、FLASHファイルなどと連携して行うことによりセキュリティ制限を
突破する攻撃手法がAnti-DNS Pinningである（この呼び名が定着するかどうかは
わからないが、今の時点ではこのように呼んでおこう）。この攻撃によって、特
にFLASHの場合には大きな被害が発生するおそれがある。インチキ英語で記事とデ
モを公開しているので、こちらの攻撃については次のURLを参照のこと。

http://www.jumperz.net/index.php?i=2&a=3&b=3

　FLASHには以前からXMLSocketというネットワークアクセス機能が備わっていた
のだが、最新版（9以降）のFLASHプレーヤーではさらに強力なSocketクラスが登
場した。このクラスを使用することでウェブページに埋め込まれたFLASHファイル
は完全なTCPクライアントとして機能することが可能となった。
　「FLASHにSocketの機能なんか必要ないだろう。いったいどこの誰が使うんだ？
」と思っていたら、なんとVNCのFLASH実装なども登場している。そのうちFLASHで
実装されたメーラーや、しまいにはFLASH上で動作するウェブブラウザなんかも登
場するかもしれない。何にせよ、シェアを伸ばし「インストールされていて当た
り前」となったFLASHが、この時点でこのようにネットワークアクセス機能を強化
することは恐怖である。

　Anti-DNS PinningとFLASHを組み合わせた攻撃は恐ろしいものだ。ここで、対策
としてFLASHプレーヤーをアンインストールしてしまえば話は簡単である。しかし
例えばYouTubeのような便利なサービスが使えなくなってしまうことを考えると、
アンインストールは現実的でない。特にネットワーク管理者がユーザに対し「危
険なのでFLASHプレーヤーは禁止します」と強制することは大きな反発を呼ぶだろ
う。

　ではどうするべきか。従来のFLASHが持つアニメーションやストリーミングの機
能は活かしつつ、SocketクラスやXMLSocketクラスが行う独自のTCPレベルのアク
セスのみを禁止できないだろうか。FLASHプレーヤーにそのような設定項目が用意
されていればベストであるのだが、どうやらAdobe様は用意してくれていないよう
である。そこで、強引にバイナリファイルの書き換えによってこれを解決するこ
とにする。


■0x02.) FLASHプレーヤーの正体

　Windowsの場合、FLASHの本体はNPSWF32.dllやFlash9b.ocxのようなファイルと
なっている。Firefoxの場合はpluginsというディレクトリ内に、IEの場合には「
C:\WINNT\system32\Macromed\Flash」などのディレクトリ内に存在する。ウェブ
ブラウザを一度終了し、これらのファイルをバイナリエディタで編集する。そし
てウェブブラウザを再起動する。

　IEが使用するocxファイルは読みとり属性がついており単純に編集が行えないケ
ースがある。この場合は次のような手順で作業を行う。

1：ocxファイルの名前を（何にでもよいので）変更する

2：ocxファイルを同じディレクトリ内でコピーする

3：コピー先のファイルの読みとり属性を外す

4：ファイルを編集する

5：コピー先のファイルの名前をオリジナルのocxファイルのもの（Flash9b.ocxなど）に変更する

　改造は次のように行えばよい。なお、以下で示す改造はあくまで一例であり、
別の方法でも同じ効果をあげることは可能であるだろう。

　ここではWindowsのAPIのひとつであるconnect()の呼び出しに注目することにす
る。このAPIはソケットプログラミングにおいてTCPの接続を行う際に利用される
ものだ（ActionScriptにもconnect()が存在するが、これとは別のものであること
に注意すること）。FLASHも例外ではなく、Socketクラスなどを利用してTCP接続
を行う際には内部でこのAPIを呼び出している。


■0x03.) OllyDbgで解析

　connect()を呼び出している位置をOllyDbgを用いて特定する。OllyDbgでNPSWF
32.dllを開くと、loaddll.exeを使ってデバッグ可能な状態にすることができる。
CPUウィンドウでCtrl+Nを押し、そこからconnect()を探すことにする。しかしこ
こではなぜかWSOCK32.dll内のAPIは「WSOCK32.#10」のように表示されてしまい、
直接「connect」というキーワードで探すことはできない（理由はよくわからない。
誰か教えてください）。そのため、connectはWSOCK32あたりのDLLに存在する、と
いう予備知識が必要だ。

　適当に「WSOCK32.#10」などを選択してEnterキーを押すと、リファレンスが表
示される。ここで#10はrecvfromであることがわかる。ここで表示されたrecvfro
mの行を選択しさらにEnterキーを押すと、NPSWF32.dllのアドレス3018BAE2付近に
CPUウィンドウの表示が移動する。ここにWinsock系APIのリストがずらりと書かれ
ており、その中からconnectを見つけることができる。

　CPUウィンドウ上でコメント欄にWS2_32.connectと書かれた行を選択し、右クリ
ックから「Find reference to」->「Selected command」を選択すると、connect
を呼び出している箇所が特定できる。筆者の環境では300B49A5と300B4A78の2箇所
だ。


■0x04.) connect()の呼び出しを潰す

　connect()の呼び出しは次のようになっている。

-----
300B49A5  |. E8 50710D00    CALL <JMP.&WSOCK32.#4>
-----

　呼び出しは「E8 50 71 0D 00」の5バイトで行われているので、これをすべてN
OPで潰してしまえばよい。…と思ったら、これでは実行される際に不正終了して
しまう。これはおそらくAPIを呼び出す前にスタックに引数が積まれているので、
こちらを正しく処理する必要があるのだろう。

　connectの引数は3つあり、確かにcallの直前付近でいろいろpushしているのが
わかる。それらのpush命令を潰す方法も考えられるが、ここではその方法ではな
く、popを3回繰り返し、スタックに入っている余分なデータを取り除くことにす
る。pop eaxは0x58となるので、3バイトあれば3つの引数をすべて取り除くことが
できる。ここでは潰す命令が5バイトあるので、2バイトの余裕を持って書き換え
を行うことができる。つまり書き換え後は 58 58 58 90 90 となる。これによっ
てconnect()の呼び出しは行われないことになる。

　この命令に続いてtext eax, eaxが行われることからもわかるとおり、connect
()を呼び出した後、FLASHはその接続が成功したかどうかを戻り値から判断する。
connect()は接続に成功した場合は0を返す。命令を書き換えた結果、ここでEAXに
はpopした値が入っているのだが、都合がよいことに、これは（connectの呼び出
しでは第1引数が0でないので）0ではない。そのため、FLASHはconnect()が失敗し
た、つまりTCPの接続ができなかったと判断して処理を続行する。つまり単にサー
バーが落ちていたりする場合と同様の処理が進むことになり、FLASHファイルの実
行パターンとして不自然でない状態を保つことができるのだ。TCPの機能のみを禁
止する方法としては非常にスマートだといえるだろう。

　DLLの場合は2箇所、OCXの場合も同様に2箇所をこのような方法で潰せばよい。
以下に筆者の環境での該当箇所を示す。

----- DLL
300B49A5   E8 50710D00      CALL <JMP.&WSOCK32.#4>
300B4A78   E8 7D700D00      CALL <JMP.&WSOCK32.#4>
-----

----- OCX
300C6979   FF15 BC361A30    CALL DWORD PTR DS:[<&WSOCK32.#4>]
300C6BA2   FF15 BC361A30    CALL DWORD PTR DS:[<&WSOCK32.#4>]
-----

　OCXの場合は潰す対象は6バイトになるので、「58 58 58 90 90 90」と書き換え
ればよい。


■0x05.) HTTPアクセスには影響しない

　connect()を潰してしまうとYouTubeも見ることができなくなりそうなものだが、
実際には問題なく動画が再生される。これはYouTubeでは動画の取得にHTTPでのア
クセスが使われており、かつFLASHプレーヤーはHTTPのアクセスについてはconne
ct()よりも少しレベルの高いAPI（おそらくWinInetなどと呼ばれるもの）を利用
しているからではないかと考えられる。あるいはウェブブラウザの機能を使って
いる可能性もある。この点については詳しくは調べていない。いずれにせよFLAS
HプレーヤーのHTTPレベルのネットワークアクセス機能を邪魔することはない。


■0x06.) まとめ

　このように、バイナリファイルを直接改造することで、FLASHプレーヤーのTCP
レベルのネットワークアクセス機能のみを禁止することができた。この方法を使
えばAnti-DNS Pinning攻撃を恐れることなく、YouTubeなどを楽しむことができる。
FirefoxなどにはFLASHの動作を制限するプラグインなどもありそうだが、このテ
クニックはIEやFirefox、Operaなどの主要なウェブブラウザで共通して使うこと
ができる点ですぐれているといえるだろう。


