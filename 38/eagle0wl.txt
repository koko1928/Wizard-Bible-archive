x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x

--- 第○章: 『リバースエンジニアリング冬祭り』レポート ---

著者：eagle0wl

x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x


■0x01.) はじめに

　昨年の12月14日、東京御茶ノ水にて、界隈でも少しずつ注目されている「リバ
ースエンジニアリング」技術に関するワークショップが開催されると聞いて、例
によって筆者も参加してきました。詳細は以下のリンクから。

カーネギーメロン大学セキュリティ・ワークショップ
「情報セキュリティのためのリバースエンジニアリング 2.0w」
http://cmuj.jp/071214workshop/index.html

　このワークショップは昨年4月に開催された「情報セキュリティのためのリバー
スエンジニアリング」の2発目ということで、前回に引き続きカーネギーメロン大
学日本校の武田圭史教授が企画されたものです。前回のレポートは Wizard Bible
 vol.33  に筆者のものが掲載されていますので、そちらも併せて参照いただけた
らと思います。今回も僭越ながらレポートを記したいと思います。

Wizard Bible vol.33
第2章：「リバースエンジニアリングまつり」レポート
http://wizardbible.org/33/33.txt


■0x02.) 前回に続いて

　会場に着いてみると、例によって Wizard Bible などでおなじみの方や、Blac
kHat などのセミナーやコミュニティなどでお馴染みの方を多数見かけましたが、
例によって普通にオフ会的な雰囲気になっていました。やはりセキュリティ業界
は狭いと思った次第。
　前回は、リバースエンジニアリングを主題としたワークショップと捉えると、
恐らく日本発の試みだったと思われます。初めてということもあり、イントロダ
クション的な内容がほとんどでしたが、今回は「どのようにして脆弱性を分析し
ているのか」「私はこのようにしてウイルスを解析している」というような実践
報告が含まれるようになり、聴講者のニーズに応えられる内容になっていたので
はないかと思います。実際、運営側も発表項目の選定には苦心していたようです。
　開始早々「レポートは是非書いて欲しいですが、オフレコ発言も含むのでその
辺はよろしくお願いします。特にパネルディスカッションは控えめに」（うろ覚
え）といった趣旨のアナウンスで釘を刺されてしまいました。明らかに筆者が書
いた前回のレポを意識しているしか思えない流れに噴いてしまいましたが、今回
は自重しながらレポートしたいと思います。


■0x03.) その1：脆弱性テストの合法性

　初めは、前回に引き続き高橋弁護士が「脆弱性テストの合法性」と題して、厳
密に捉えるとグレーな部分の多い脆弱性テストについて、国内における解釈を示
していました。日本国内においてはどこまでセーフなのか、という線引きがなさ
れていないので、（ある程度議論が進んでいる）海外の著作権法や報告などをベ
ースにして解釈せざるを得ないという現状からは、ある種のもどかしさを感じま
す。本発表で引用している海外の議論や報告案の中には10年以上前のものも含ま
れており、事例集めに苦心していることを感じ取れます。

　前回は「自己のコンピュータを守るためのリバースエンジニアリングを、妨害
予防請求権（※1）的な立場で捉えることはできないか？」といった、ポジティブ
な目的で行うぶんについて正当性を考えることはできないのだろうかという議論
がありました。今回は、（一定条件下で）リバースエンジニアリングを許容する
ような海外の法律・報告に加え、国内における議論についても紹介されていまし
た。これは1994年の報告書で、14年前になりますがリバースエンジニアリングに
関する議論がなされているということで貴重だと思います。

「コンピュータ・プログラムに係る著作権問題に関する調査研究協力者会議報告
書−既存プログラムの調査・解析等について」
http://www.cric.or.jp/houkoku/h6_5/h6_5_main.html

　最後に、ある程度解釈論で対応できないこともないだろう、としながらも、リ
バースエンジニアリングの許容性について、公の立場からコメントがなされるべ
きだとまとめていました。リバースエンジニアリングに関する新たなルールを定
めることが課題であるとしています。

　ここからは筆者の意見です。今回は「脆弱性テスト」というある種「ポジティ
ブなリバースエンジニアリング」からのアプローチでしたが、もう少し枠を広げ
て「ネガティブなリバースエンジニアリング」の例から探っても面白い例は得ら
れるではないかと思いました。

　「ネガティブなリバースエンジニアリング」の例を挙げるとクラッキング（い
わゆるプロテクト外し）があります。このクラッキングに最も関わりがあるとさ
れる法律は、最近、地上波デジタル放送のコピー保護機能を無効化できることで
業界が激震したフーリオの件でも名前の挙がっている「不正競争防止法」が該当
します。1999年の不正競争防止法の改正により、いわゆるMod-Chipのような「コ
ピー保護を回避する装置」の販売が違法になりました（所持・製造は違法ではな
い）。実は、この改正にあたり、プログラムを改変することによる認証回避（ソ
フトクラック）に関しても議論の対象となり、当時のアンダーグラウンドにおけ
るソフトウェアクラック界でも非常に注目されました。結果としてプログラムの
改変に関しては「ID・パスワードなどの情報を提供する行為と、迂回（プログラ
ムのバグを利用してパスワードを入力しなくても使えるようにすること）に関す
るノウハウを提供する行為については明確な切り分けができない（略）情報提供
については最大限の自由度を確保すべき」（※2）という形になり議論が先送りさ
れたので、プログラムの改変に関しては未だにグレーゾーンとなっています。

　とはいえ、正直なところ広義のリバースエンジニアリングは各所で当然のよう
に行われているのが事実であり、このように真剣な議論を行うことに空しさを感
じることもあります。受け売りになりますが、公の立場から明確なコメントがな
される時期ではないかと思います。

※1
例えば、家の前が崖崩れしそうな場合に、その崖の所有者に対策を講じるよう請
求できること

※2
『インターネット訴訟2000／岡村 久道』（ソフトバンク）　p91


■0x04.) その2：セキュリティ脆弱性分析

　続いて、前回の発表時ではeEye社でしたが、現在はフォティーンフォティ技術
研究所の鵜飼さんが、7-ZIP32.DLLの脆弱性を発見した実例を題材にした、脆弱性
を発見するまでに至るプロセスの紹介でした。本ワークショップの目玉だったと
思います。

　まず、攻撃者側の脆弱性発見・分析手法が高度化（プロ化）している現状を取
り上げ、そのためか、有名なアプリケーションは一定のセキュリティレベルを満
たしていると指摘しました。結果として、これまでのブラックボックス的アプロ
ーチの脆弱性検査が非効率なものになってしまったようです。代わって設計・実
装をホワイトボックス的に検査できるリバースエンジニアリングが評価されるよ
うになり、セキュリティ技術者にとってはもはや基礎技術と呼ばれるまでになっ
たとのことです。

　さらに、近年は（ターゲットに罠を踏ませるタイプの）受動的攻撃を成立させ
るような脆弱性の攻略がトレンドになっていることを指摘、その中でも有名ワー
プロソフトやアーカイバ・メールソフトやブラウザソフトのような、誰もが日常
的に用いるソフトウェアをターゲットにできる「ファイルフォーマット脆弱性」
が増加していますが、これの発見もやはり「リバースエンジニアリング」。

　リバースエンジニアリング以前はFuzzing（※3）などで大量に発見されたよう
です。しかし、ファイルフォーマットの構造解析処理の不具合に起因しているた
め、前述のようにブラックボックス的アプローチであるFuzzingは効率が悪すぎる
ためか、すでに過去の技術になりつつあるとのことです。

　さて、【目的意識を持って】実際に何らかのプログラムを逆アセンブル・デバ
ッグした方なら分かると思いますが、出力される逆アセンブルリストは、一般に
膨大なものとなります。プログラムの解析を行う上で、その膨大なリストの中か
ら【効率良く】問題のある箇所を発見することは、リバースエンジニアリングに
おいて非常に重要な事柄ですが、これにはある種のノウハウが存在します。

　鵜飼さんが「脆弱性発見の鉄則」として「自分だったらどのようなコードを書
くか」「自分だったらどういうバグを作りこんでしまうか」を考えるべきだ、と
示していました。これは脆弱性発見に限らず、リバースエンジニアリング技術そ
のものにも当てはまると言えますが、特に前者は、筆者の経験からもあまりにも
重要であり基礎中の基礎であると再確認しました。「クイズは創造力」もとい「
リバースエンジニアリングは想像力」ですね（？）。

　さらに効率を上げる方法として、具体的な脆弱性のあるコードを示した上で「
明らかに実装し忘れないであろう異常処理は検査しない、実装し忘れる可能性が
あるもののみを集中検査」と、有名アプリケーションが一定のセキュリティレベ
ルを満たしている現状を踏まえての方針を紹介していました。このように、リバ
ースエンジニアリングの効率を上げるためには、ある程度の「割り切り」は必要
ですね。裏を返せば、方針を立てる段階で判断を誤るとドツボにはまってしまう
とも言える訳で、これが難しいところでもあります。

　ここで「自分だったらどのようなコードを書くか」という想像力の話に戻しま
すが、この考え方はとても重要です。例えば、シリアルナンバーのクラックが目
的ならば、シリアルナンバーのチェックルーチンを見つけることができれば半分
勝ったようなものです。逆にこれを見つけることができなければ目的の達成はほ
とんど不可能です。そこで、シリアルナンバーのチェックルーチンを見つけるた
めに「自分ならばどのようにチェックルーチンを実装するか」を考えます。一般
的なフローを示します。

1：ユーザにエディットボックスからシリアルナンバーを入力させる
2：エディットボックスに入力されたシリアルナンバーを取得する
3：チェックルーチンを呼び出し、シリアルナンバーの正当性をチェックする
4：チェック結果を画面に表示する
　例）「シリアルナンバーが違います」
　　　「ユーザ登録ありがとうございました」

　攻撃者が欲しい情報はステップ3のチェックルーチンの在り処ですが、ここでは
ステップ2に着目します。実は、エディットボックスから文字列を取得する方法は
非常に限られており、具体的にはWin32APIのGetWindowText(),GetDlgItemText()
ぐらいしかありません。これらの関数を呼び出している箇所を調べていけば、チ
ェックルーチンは見つかるはずです。もちろん、必ず見つかるとは限りませんが、
このような予測を立てれば、コードをしらみ潰しに調査するよりも、作業効率は
格段に上がります。
　同様にウイルスを解析したいのであれば、ファイル入出力関数やレジストリ操
作関数を呼び出している箇所に着目するべきでしょう。このように「どういった
プログラムを解析するのか」「そのプログラムを解析して何を得たいのか」で、
アプローチは異なってきますが、基本的な考え方は共通しています。

　話を戻します。今回、鵜飼さんは「ファイルフォーマットの処理に脆弱性があ
るだろう」と見込んで調査を行っています。そこで、鵜飼さんは「メモリ確保と
メモリブロックコピー処理に境界チェックのバグが存在するかもしれない」こと
に着目して、memcpy() を呼び出している箇所を順次チェックして、【脆弱性にな
りうる可能性のある】箇所を捜し当てるという方法を紹介していました。
　以降はコードを精査し、脆弱性となるケースの特定を行うわけですが、ここか
らはIDA Proなどの解析ツールが出力する実際のコードの説明になります。フォテ
ィーンフォティ技術研究所のウェブサイトから、本講演で用いられたスライドを
ダウンロードすることができるので、技術的な詳細に興味のある方はそちらのほ
うを参照いただけたらと思います。

Research Papers
http://www.fourteenforty.jp/research/research_papers.htm
「リバースエンジニアリングとセキュリティ脆弱性分析」


※3
プログラムの入力に対して、ブルートフォース的に様々な入力値を生成・投入させ、エラーを故意に引き起こす手法


■0x05.) その3：コンピュータウイルスの解析方法

　続いて、日本コンピュータセキュリティリサーチ株式会社の岩本さんの発表で
したが「私はこのようにしてウイルスを解析している」という、リアリティのあ
る内容でした。まず最初に、画面上に逆アセンブルコードを表示するのではなく、
それを紙に印刷して、関数電卓を用いながら鉛筆でチェックを入れるという方法
で静的解析（プログラムを実行させずに解析すること）を行っているとのことで、
それを聞いて驚きました。現在は開発の終了したカーネルデバッガSoftICEを使う
場合では、SoftICEの性質上PC上でメモを取ることができないので、紙と鉛筆が用
いられていたものです。しかし、なぜわざわざ「紙と鉛筆」なのかが最初は理解
できませんでしたが、発表後の質疑応答で、コードの隅々まで自分で理解するた
め、という趣旨の回答があり、職人プログラマ的なものを感じました。

　1998年から2007年までのウイルス解析の実績から、C言語などの高級言語で書か
れたウイルスが急増していること、ウイルスの種類も多様していること、マンパ
ワーが必要だがすでに頭打ちになっている現状から、解析の自動化を実施するに
至ったようです。

　岩本さんは、検体がもつプログラムの特徴（ここでは、Win32API関数の呼び出
し履歴）に着目してグラフ化し、既存のマルウェアとの類似性を導くことで、解
析を始める上での手がかりの取得と機能推定を行っているそうです。これにより、
新しく追加された処理や削除された処理も分かるため、追加された処理から解析
すれば効率が上がるということになるわけですね。

　実は、API関数の呼び出し履歴に着目したプログラムの類似判定は、コンピュー
タウイルスとは別の分野でも研究されていることはご存知かもしれません。

　知的財産権保護のための技術用語で、BirthMark（あざ）と呼ばれているものが
あります。これはプログラム固有の特徴のことであり、プログラムの盗用の事実を
証明するために用いられるものです。BirthMarkはプログラムが持っている”特徴”
であるため、電子透かしのように後からデータを埋め込むものとは異なります。
このBirthMarkをどのように抽出するか、ということでAPI呼び出しに着目した報
告がいくつかあります。盗用を証明するための技術が、コンピュータウイルスの
亜種解析という形でも生かされているというのは、奇妙で興味深いです。

http://se.naist.jp/~harua-t/publication.html
岡本 圭司, 玉田 春昭, 中村 匡秀, 門田 暁人, 松本 健一, ``ソフトウェア実行時のAPI呼び出し履歴に基づく動的バースマークの提案'', ソフトウェア工学の基礎XI, 日本ソフトウェア科学会 FOSE2004 (FOSE2004), pp.85--88, November 2004.
etc...


■0x06.) その4：マルウェア解析の自動化

　続いて、セキュアブレインの星澤さんによる「マルウェア解析の自動化」と題
した発表でした。最初に「リバースエンジニアリング＝逆アセンブル」と限らな
いのでは？　という問いかけに始まり、岩本さんも紹介していたプログラムの特
徴から亜種を特定する話も登場しましたが、分析・分類・対策といった、マルウ
ェアの対処方法の自動化にも触れられていました。

　まず、ツールによって自動生成されたマルウェアの解析レポートを提示した上
で、2007年上半期に発見されたウイルスの数から、これらのウイルスに対応する
ためには相当数の解析エンジニアが必要であることを示していました。しかし、
エンジニアの技術レベルによって解析結果の品質にバラつきが生じてしまう、（
有名なマルウェアであれば労力は割けるが）すべてに対して平等に労力を割く訳
にもいかない、といった現場からの問題に対処するために、自動化を行うに至っ
たとのことです。

　まず、解析を行うにあたって、検体の収集とマルウェアを擬似的に実行させる
環境の構築が必要不可欠になります。近年のマルウェアは、ネットワークへの接
続を前提としたものも多く、それをエミュレートできるダミーサーバの構築が必
要になっています。さらに、解析を妨害するアンチデバッグ処理の回避（Anti-A
nti Debug）なども行う必要もあり、マルウェアが動作しやすい環境を作るだけで
も相当の努力が必要になるようです。さらにログの肥大化対策として、ロギング
すべき情報を厳選するなどといった取捨選択も迫られるとのことです。

　発見されたマルウェアが新種であるか、亜種・変種であるかの判断は、現状は
エンジニアが経験に基づいて判定しているそうです。しかし、明確な基準が無い
ために、エンジニアやベンダによって判定結果が異なることが問題になっている
とのこと。この問題を解決するために「Windows API の種類や呼び出しのタイミ
ングに着目」することでマルウェアを分類できるか検討を行い、「アンチウイル
スベンダのエキスパートが人的努力によって行った分類結果と比較して遜色がな
く、効果的な手法」であるとの結果を得られたとのことです。


■0x07.) その5：コード解析のための知識と技術の体系化＆パネルディスカッション

　最後は、武田教授が「コード解析のための知識と技術の体系化」と題して、な
ぜコード解析が必要なのか？　必要な知識は？　といった課題の整理と、トレー
ニングプログラム案を展開していました。

　最後には、セキュリティの脅威が高度化に対応するためも、知識の集積と体系
化が必要、そのためにはコード解析に関するトレーニングの場の提供と、ワーク
ショップにおける講演者やスタッフの募集といったマンパワーも必要である、と
結んでいました。

　パネルディスカッションでも、やはり人材確保や教育に関する話題が多数を占
めました。「手を動かす機会が無い」「法律を気にすると手が進まない」「上流
の人間が多くソフトウェア技術・開発のできる人が少ない」「一般業務では実務
経験は得られない」「即戦力は無理だが、教育をすれば出来るようになるのでは」
「人を増やすには給料を上げればよい、海外のリバースエンジニアの給料はすご
く高い」など、リバースエンジニアリング技術の扱いの難しさが浮き彫りになっ
ていたように思います。しかし「機会があれば動くのではないか、基礎ができれ
ばなんとかなる」、鵜飼さんの発表の最後でも取り上げられていましたが「向上
心の強いエンジニアが常日頃から交流を持ち、日々実戦経験を積んでいく事で、
みるみる技術力は向上する」といった力強い言葉もありました。

　最後に、質問の時間が設けられたのですが、僭越ながら発言させていただきま
した…が、すごくアホな質問をした結果、会場が失笑していました。（セキュリ
ティ業界の中のリバースエンジニアリング業務を指して）「ニッチ産業」のワー
ドを連呼したのはウケ狙いと思われても仕方ないです（汗）。慣れないことはす
るものではないと強く感じました。しかし、鵜飼さんから「そのニッチを極めて
欲しい、突き詰めれば絶対に評価されるはず」といった趣旨の回答をいただきま
した。やはり第一線で活躍している方は熱いなと思った次第です。


■0x08.) 最後に

　前回に引き続き、武田教授によるワークショップとなりましたが、各所からも
同様の試みが成されることを期待しています。また、今後のワークショップにお
ける講演者やスタッフを募集しているそうです。興味のある方やネタをお持ちの
方は、リバースエンジニアリング技術の発展のためにも、是非、是非、手を挙げ
ていただきたいと思います。


