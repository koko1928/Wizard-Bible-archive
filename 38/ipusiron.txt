x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x

--- 第○章: 基礎暗号学講座・第13回 〜ハッシュ関数〜 ---

著者：IPUSIRON

x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x


■0x01.) はじめに

　ハッシュ関数はインターネットにおけるセキュリティのあらゆる分野で利用さ
れている。例えばファイルのバイナリのハッシュ値を取っておくことで、ファイ
ルの改竄を検知することができ、これはフォレンジックの分野でも活躍している。
また、UNIXのログイン認証の際、パスワードファイルに暗号化されたパスワード
が記録されているが、このときハッシュ関数が用いられていることもある。さら
に、掲示板では騙り防止のためのトリップという概念が存在するが、これはハッ
シュ関数と考え方は同じである。
　よって、安全なハッシュ関数が必要といえる。しかし、そもそも「安全な」ハ
ッシュ関数とはどのような意味を指すのだろうか。それを追っていくには、ハッ
シュ関数そのものの定義を明らかにしていかなければならない。そこで、今回は
ハッシュ関数の応用という観点ではなく、ハッシュ関数そのものの基礎的な部分
について焦点を当てる。


■0x02.) 圧縮関数

　ハッシュ関数の定義の前に、圧縮関数を定義する。圧縮関数という名から推測
できるが、これはある一定の長さのビット列をより短いビット列に変換する関数
である。

　例えば、8ビットのビット列を4ビットのビット列に変換する圧縮関数を考えて
みよう。この関数は「**** ****」のような2進8桁（8ビット）を入力したときに、
「****」のような2進4桁（4ビット）を出力するものである（「*」は0または1を
意味する）。ポイントは、入力値のビット数が固定されていて、なおかつ出力値
のビット数も固定されているということである。定義の言葉の「一定の長さのビ
ット列」という部分が重要である。


■0x03.) ハッシュ関数

　ハッシュ関数とは、任意の長さのビット列を、一定の長さのビット列に変換す
る関数である。

　先ほどの圧縮関数との違いがわかるだろうか。圧縮関数のときの入力はビット
列が固定されていたが、ハッシュ関数のときの入力は任意のビット列、即ちビッ
ト列が固定されていないということである。
　また、圧縮関数のときは入力の長さは出力の長さより大きい必要があったが、
ハッシュ関数のときはそれは触れられていない。つまり、入力の長さと出力の長
さの大小関係は問題にしていないという点である。

　例えば、任意のビット列を入力とし、入力値に含まれる1が奇数個なら1、偶数
個なら0という1ビットを出力するハッシュ関数を考える（ハッシュ関数の定義を
満たしている）。このハッシュ関数に「0100101」を入力すれば、「1」（入力値
には1が3つだから奇数）が出力される。またこのハッシュ関数に「101」を入力す
れば「0」（入力値には1が2つだから偶数）が出力される。実は、この仕組みはネ
ットワークの分野で登場するパリティチェック方式の奇数パリティと同じ考え方
である。入力値に含まれる1の個数の計算は、各桁の数字をすべて単純に排他的論
理和（XOR）で足し合わせればよいだけである。

　このハッシュ関数の入力値は任意であり、一方出力値は1ビットである。即ち、
入力として取り得る値の候補数はいくらでもあるが、出力として取り得る値の候
補数は2パターンしかない（出力値が1ビットだから）。明らかに入力値の候補数
のほうが多いので、決してこの関数は単射になることはない。これはハッシュ関
数すべてに言える性質である。

　これでハッシュ関数の定義はわかった。

　次の問題は、任意の入力を取りつつ、一定の長さの出力を行うハッシュ関数を
作れるのかという点が疑問に残る。先ほどの奇数パリティの例の具体的に作れる
ことは明らかである。しかし、ここで問題にしているのはどんなハッシュ関数で
あっても作れるのかという点である。この問題は直観的に、圧縮関数があれば、
ハッシュ関数も作れそうだということが定義からわかると思う。なぜならば、ハ
ッシュ関数の入力である任意のビット長の個数分だけ、圧縮関数を用意すればよ
いだけだからである。ハッシュ関数に10ビットが入力されたら、内部で10ビット
の入力値を取る圧縮関数を呼び出す。また、ハッシュ関数に4ビットが入力された
ら、内部で4ビットの入力値を取る圧縮関数を呼び出す。こういう仕組みを考えれ
ば、あらゆるビットの入力値を取る圧縮関数をたくさん用意しておけば、それに
応じて対応できるということになる。

　これでハッシュ関数が構成できるということがいえそうだが、問題はまだ残っ
ている。我々が欲しいハッシュ関数は「安全な」ハッシュ関数である。この問題
を解決するためには、「安全な」という意味を明確にする必要がある。よって、
次に安全性の説明を行う。


■0x04.) 「安全な」という意味

　ハッシュ関数における安全性とは2つの意味がある。第1に、具体的なハッシュ
関数、例えばMD5,SHA1などといったハッシュ関数そのものに関する安全性である。
第2に、すべてのハッシュ関数に共通して存在する安全性である。今回は具体的な
ハッシュ関数について取り上げる予定がなく、まず共通した安全性が述べられて
いないうちから具体的なハッシュ関数の問題点を述べても意味があまりないので、
すべてのハッシュ関数に共通して存在する安全性を議論の中心とする。

　先ほどの奇数パリティの例でいうと、入力値が「111」や「10101」の場合、ど
ちらとも出力値は「1」になる。このように入力値が異なるのに、出力値が一致し
てしまった値のことをコリジョン（衝突）という。すべての圧縮関数、すべての
ハッシュ関数はコリジョンを持つ。なぜならば単射ではないから、これは避けら
れない。問題は不正を行う（多項式時間アルゴリズムである）敵が、コリジョン
を持つような入力値の作れるかという点である。即ち、敵が出力値が一致するよ
うな入力値のペアを計算できるかどうかという点である。

　これは2つの状況が考えられる。まず、1つ目は敵が自由にコリジョンを発生さ
せる入力値のペアを計算するという状況である。次に、ある指定された入力値の
出力値と同じ出力値を持つ入力値を計算するという状況、即ち入力値のペアの片
方が指定されて、そのもう片方を計算するという状況である。敵にとって、前者
の問題を衝突困難問題、後者の問題を弱衝突困難問題という。
　問題を明確にするために、式を使って考える。ここではハッシュ関数をhとする。

-衝突困難問題
--（敵に与えられる）入力：h
--（敵が解く値である）出力：h(x)=h(x')を満たすペア(x,x')
-弱衝突困難問題
--（敵に与えられる）入力：h,x
--（敵が解く値である）出力：h(x)=h(x')を満たすx'

　2つの問題の違いがわかっただろうか。では、敵にとってどちらの問題の方が難
しいだろうか。「弱」と付いているからといって問題が簡単と勘違いしてはなら
ない。実際には衝突困難問題より、弱衝突困難問題のほうが難しい。ポイントは
衝突困難問題の場合、コリジョンを発生させるどのようなペア(x,x')を出力すれ
ばよいだけである。一方、弱衝突困難問題の場合、xは固定されていて、それに対
応するx'を求める必要があるのである。
　例えば、コリジョンは必ず存在することを述べた。そして、最大でコリジョン
は出力値の候補数分だけ存在する。しかもひとつのコリジョンでも、入力値のペ
アは色々なパターンがある。そのパターンの1つでも求められればよいのが衝突困
難問題である。一方、入力値のペアは色々なパターンがあるが、そのうちペアの
うちの1つが固定されているので、パターン対象が少なくなっている。この少ない
パターンから1つ求めるのが弱衝突困難問題である。つまり、答えの候補が少なく
なっているので、弱衝突困難問題のほうが直観的に難しいというのが理解できる
と思う。

　実際に暗号の世界できちんと証明しようとすれば、帰着法を用いる。つまり、
衝突困難問題を解くアルゴリズムが存在すると仮定して、弱衝突困難問題を解く
アルゴリズムを構成できることを示せばよい。これはすごく簡単なので各自考え
てもらいたい。

　ここで、任意の敵にとって圧縮関数（もしくはハッシュ関数）の衝突困難問題
（もしくは弱衝突困難問題）が解けないとき、衝突困難（もしくは弱衝突困難）
な圧縮関数（もしくはハッシュ関数）と呼ぶことにする。
　これらがハッシュ関数の安全性に対応する性質である。問題の場合は衝突困難
問題より弱衝突困難問題のほうが難しいと述べたが、安全性の強弱はこれと逆に
なる。意味で考えるとわかりやすい。容易な問題を敵が解くことができないとす
るほうが安全性が強い。つまり、、弱衝突困難な圧縮関数（もしくはハッシュ関
数）より、衝突困難な圧縮関数（もしくはハッシュ関数）の方が安全だといえる。
よって、衝突困難なハッシュ関数のほうが存在意義が大きいことになる。


■0x05.) 安全なハッシュ関数の構成

　衝突困難な圧縮関数が存在するならば、衝突困難なハッシュ関数を構成する手
法が知られている。この手法をMD変換という。ここでは実際のMD変換の仕組みは
触れない。このMD変換を行っても、安全性が維持されることは次のURLで証明して
いる。

http://akademeia.info/index.php?MD%CA%D1%B4%B9

　また、安全な暗号スキームが存在すれば、衝突困難な圧縮関数は存在すること
も知られている。

　以上のことをまとめると、安全な暗号スキームが存在すれば、衝突困難なハッ
シュ関数が存在するということである。

　注意してもらいたいのはあくまで「安全な暗号スキームが存在すれば、衝突困
難なハッシュ関数が存在する」ことが証明されただけであり、具体的に衝突困難
なハッシュ関数はいまだ1つも発見されていない。つまり、衝突困難なハッシュ関
数は仮定を置くことで数学的に存在が証明されるが、実際にはまだ1つの衝突困難
なハッシュ関数も発見されていないのだ。
　それでは仮定の妥当性が問題であることが疑われるが、仮定には特に問題ない。
（効率的かどうかはべつとして）安全な暗号スキームは具体的にいくつも発見さ
れている。それなのに、衝突困難なハッシュ関数は1つもまだ発見されていないの
である。

　この事実は現在インターネット上で使われているハッシュ関数はすべて衝突困
難でないことも意味している。このことが問題かどうかということは、現在のコ
ンピュータが実行できるビット長や、別の安全性なども考慮しなければならない
ので、一概にはいえない。しかしながら、少なくとも現在は、理想的な状況では
ないということだけは言えるだろう。


■0x06.) 終わりに

　今回は数学的記述をなるべく減らして、直観的な理解で読み進められるように
したつもりでしたが、どうだったでしょうか。今回の記事を通じて、暗号に興味
を持たれた方が少しでも増えてくれれば本望です。

　厳密性を欠いていて、暗号を専門にしている方にとっては眉をひそめる部分が
あるかもしれませんが、その点は許してください。なお、ハッシュ関数について
あまり詳しいわけではないので、間違えたことを記述していたら指摘してくださ
い。


