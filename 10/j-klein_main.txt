フィンガープリント偽装


□ 目次
  1. はじめに
  2. なぜ、ソフトウェアを偽装するのか
  3. Apache-2.0.x系の偽装
  4. ProFTPDの偽装
  5. Telnetの偽装
  6. まとめ
  7. 参考サイト



 1. はじめに



いきなりだが『偽装』と聞いてどんな印象をうけるだろうか？  「◯◯を偽装した」などと言われると、いかにも悪いイメージがあるのではないだろうか。例えば『偽装』に関連した行為・技術といえば

・ファイルの偽装
・IPアドレスの偽装
・メールアドレスの偽装
・URLの偽装

他にもいろいろあって、Googleで『偽装』で検索すると『日本◯ム牛肉偽装事件』なんてものも見つかる。どう見たって、『偽装』は黒い技術としか思えない。しかし、これを防御の側から利用できないだろうか。つまり、クラッカーから攻撃されない（もしくは適切な攻撃をされない）ようにシステムを偽装すれば良いのだ。

では、システムを守るために何をどう偽装すれば良いのか？ いろいろな偽装が考えられるが、ここではサーバとして動作するソフトウェア（以下ことわりが無い限り、ソフトウェア＝サーバとして動作するソフトウェアとする）を偽装することだけを考えてみたいと思う。他の防御の為の偽装のアイディアは最後に触れる程度にしておく。


 2. なぜ、ソフトウェアを偽装するのか



なぜ、ソフトウェアを偽装するのか。これはクラッカーが攻撃の際に何をするかを考えれば分かるはずだ。特に攻撃自体を自動化している場合、ソフトウェアの偽装はかなりの威力を発揮する。例えば、一昔前に流行した（？）IISのUnicodeバグを自動で攻撃する場合、次のような自動化プログラムが使用されると思われる。

(1) ランダムな（または任意の範囲の）IPアドレスに対して80番ポートが開いているかを調べる。
(2) 開いている場合、Webサーバである可能性が極めて高い。そこでHEADメソッドなどでServerヘッダなどを見てどのソフトウェアのどのバージョンが動いているかを調べる。
(3) IISの脆弱なバージョンならば攻撃する。

このプロセスのうち（2）を適切に行なわれないようにすれば良い。この例で言えば、IIS/4.0だと思われなければ良いのだ。しかし、（2）を省いて世界中の80ポートに総当たり的に攻撃を仕掛けられると偽装うんぬんの意味は無い。事実、私の管理下にある純粋なApacheのログにも対IISの攻撃の記録が少しだが残っている。しかし、ここではそのような攻撃ではなく、上記リストの（2）を行なうような攻撃に対する防御のみを考える。

で、結局は何に偽装すれば良いのか？  結論から言えば何でも良いはずだ。攻撃方法というのはソフトウェア毎にあって、ソフトウェアAに対して有効な攻撃もソフトウェアBに対しては効かない事が多い。極端な話、存在しない名前でも良い（むしろ、存在し無い方が良いかも知れない）。

あらかじめ書いておくが、この偽装による防御は予備的な防御手段であることを忘れないで欲しい。どんなときでも適切なソフトウェアの適切なバージョンを使うのが一番であり、それをした上でこのような予備的な防御をするのである。


 3. Apache-2.0.x系の偽装



では実際にApacheの偽装をしてみる。偽装のポイントは『エラーページでのシステム情報の表示』と『Serverヘッダ』の二つだ。まずは、簡単で面白くない『エラーページのシステム表示』を偽装してみる。

まず、あなたが管理するApacheサーバに対して存在しないURLを要求して欲しい。手元の環境では次のような文字が表示される。

--------------------
Object not found!
The requested URL was bar bar bar...

Error 404
linux
Mon May 10 20:18 2004
Apache/2.0.40
--------------------

見れば分かる通り、OSの種類から詳細なバージョンまで表示されている。ここでいう『システム情報』とはこれらのことを指している。なぜデフォルトでこのような情報を表示するかはまったく分からない。一般のユーザは『ファイルが存在しないこと』を知りたいのであり、けっしてOSやソフトウェアのバージョンに興味が無いはずなのに…。とにかく、これを改善しよう。教科書通りのやり方はhttpd.conf内のServerTokensの値を変える方法だ。

ServerTokensは公開するシステム情報の量を調整するディレクティブであり、後述するServerヘッダもこのServerTokensに従う。

--------------------
ServerTokens {ProductOnly | Minimal | OS | Full}
--------------------

括弧内に含まれる値を入れればそれ相応の内容になる。出力内容は想像できるはず。しかし、これでは偽装にならないので、別のやり方で対応することにする。ServerTokensの値は適当に設定して（使用しないので何でも良い）、＜DocumentRoot＞/error/include/にあるbottom.htmlを見て欲しい。これはエラーページの末尾に読み込まれるファイルだ。詳しい説明は省くが、実験として"SERVER_SOFTWARE"を含む行を削除して、別の文字を書いて保存してほしい。そして、もう一度存在しないURLにアクセスすれば表示が変るはずだ。

次にServerヘッダを偽造してみる。実はここで挑戦する方法はApache1.3系では出来なかった。詳細は省くが、おそらくモジュールの実行順序に依存していて、できるものとできないものがあるのだろう。ここではApache2.0.40で試している。まず、多少いんちきになってしまうが、httpd.confのServerTokensディレクティブの値をFullにしてほしい。そうしないとnmapがapache2.0.40を認識してくれない。

この記事を通して、nmapのバージョンは3.50とする。

ここで、nmapでWebサーバのバージョンスキャン（-sVオプション）を行なう。

--------------------
[work] jklein% nmap -sV localhost -p 80
PORT   STATE SERVICE VERSION
80/tcp open  http    Apache httpd 2.0.40 ((Red Hat Linux) DAV/2)
...
--------------------

このような出力になるはずだ。つまり外部からバージョン情報・OS等が認識できることになる。ところが、nmapの対WebサーバのバージョンスキャンはServerヘッダのみを利用しているようなので、そこを変えればがらっと偽装できる。httpd.confにつぎのような行を入れてみて欲しい。

--------------------
Header Set Server 'Microsoft-IIS/4.0'
--------------------

まったくの逆行した偽装なのだが、これが分かりやすい結果になるので試して欲しい。上記のように設定を変えて、Apacheを再起動して、最初と同様にnmapを実行してみると…

--------------------
[work] jklein% nmap -sV localhost -p 80
PORT   STATE SERVICE VERSION
80/tcp open  http    Microsoft IIS webserver 4.0
...
--------------------

どうだろうか、本物のIIS/4.0との違いはまったくない。nmapのOSスキャン（-Oオプション）と同時に使うとLinux上でIISが動作しているように表示されるはずだ。ちなみにこの状態でしばらく放置しておくと、普段よりも多くの"XXXXXXXXXXXXX..."というログを見かけるようになる。さすがに最近は少くなったと思われるが…。

もちろん、実際に動作しているソフトウェアはApacheなので、基本的にIISに対する攻撃は効かない。


 4. ProFTPDの偽装



ProFTPDとは名前の通りFTPサーバで、使われてるサーバも多い。これの偽装に挑戦したのだが、実はApacheのように設定ファイル云々ではうまくいかない。というのもProFTPDという文字がプログラムのソースコード自体に直接書きこまれているのでプログラムを書き変える必要が有る。よって、C言語の知識が無い人は挑戦しない方が良いだろう。今流行の自己責任で試して欲しい。

変更すべき場所はsrc/main.cの中のcmd_loop関数だ。この中にあるProFTPDという文字列を片っ端から書き変えれば良い（手元のバージョンでは二箇所ある）。例えば、次のような行があるので、それを変更すれば良い

--------------------
[変更前]
pr_response_send(R_220, "ProFTPD " PROFTPD_VERSION_TEXT
                "Server ready.");

[変更後]
pr_response_send(R_220, "host FTP server (lukemftpd 1.1) ready.");
--------------------

これはMacOSXにデフォルトでついているFTPサーバをまねたものだ。このような変更をした後でnmap -sVを実行すると次のようになる。

--------------------
[network] jklein% nmap localhost -sV -p 21
PORT   STATE SERVICE VERSION
21/tcp open  ftp     LukemFTPD 1.1 (Mac OS X uses lukemftpd derivative)
...
--------------------

この結果を見て、思わず「してやったり」とニヤついてしまった。ご丁寧にOSまで教えてくれる。nmapの強力さと無力さを同時に見た気分だ。


 5. Telnetの偽装



結論から言うと、Telnetに対するnmapのバージョンスキャンを騙すことは出来なかった。一応、RedHat Linux上のtelnetでのログインメッセージを変える方法を紹介するだけにしたいと思う。

ログインメッセージは/etc/issue.netから読み込まれるので、その内容をエディタで編集すれば良い。私の環境でデフォルトの状態で

--------------------
Red Hat Linux release 9 (Shrike)
Kernel \r on an \m
--------------------

となっていた。"\r"や"\m"のようなバックスラッシュ（又は￥マーク）+１文字はエスケープ文字で、実際の表示の際には別の文字に置き換わる。利用できるエスケープ文字は

\d : 現在の日付
\l : 端末名
\m : マシン・アーキテクチャ
\n : ホスト名
\o : ドメイン名
\r : OSのリリース番号
\t : 現在の時刻
\s : OS名
\u : 現在ログインしているユーザの数
\v : OSのバージョン

となっている。ただし、『偽装』という観点からはこれらの情報を使わない方がいいだろう（まぁ、そこまで偽装にこだわる必要もないが）。このメッセージを好きに変えれば良い。最初に書いた通り、このメッセージを変えてもnmapは騙せない。が、デフォルトの状態で情報たれ流しというのも良くないので、適当に変えておこう。

Red Hat系のOSでは起動時に/etc/issueが/etc/issue.netにコピーされてしまう。これでは起動するたびに初期化されてしまうので、コピーを防止するために/etc/rc.d/rc.localのコピーを実行する部分をコメントアウトしなくてはいけない。


 6. まとめ



今回はApacheとProFTPD（とTelnet）のnmapによるバージョンスキャン対策をしてみたが、正直ProFTPDのようにソース書き変えを必要とするものはつらい。というのも１回や２回ならば良いのだが、バージョンアップで再インストールするたびにソースを書き変えるのは管理者にとってかなり負担になりうる。しかも、ソースを書き変える以上、バグを作らないとも限らない。これからサーバ系のソフトウェアを作る人は是非とも簡単にラベルを変更出来るようにして欲しいと思う。

他に簡単に出来る偽装（とは普通言わないが…）としてはポート番号の変更がある。これも想像以上に効果があると思う。特に公開サーバでないのならば、気楽に変更出来るはずだ。そして、大抵のソフトウェアはポートの変更が簡単に出来る。

ローカル内での技としてはrootの名称変更、重要なファイルの名称変更なども考えられる。慎重なクラッカーはその手の変更を見破るかもしれないが、少くとも瞬時に破られることも無いだろう。

結局、このような偽装は自分の見を守るだけではない。というのも、多くの管理者がこのようなことを行なうことでnmap等のソフトウェア/バージョンスキャンの信頼性を下げることが出来るからだ。そうなると、クラッカーにはツールに頼らない総合的な知識が必要になり、スクリプト・キディのような輩の力を押し下げることが可能になる。

と、期待するものの、最後にはいたちごっこになってしまうんだろうな（苦笑）。


 7. 参考サイト



(1) Remote OS detection via TCP/IP Stack FingerPrinting
    http://www.insecure.org/nmap/nmap-fingerprinting-article-jp.html
(2) core - Apache HTTPサーバ
    http://httpd.apache.org/docs-2.1/ja/mod/core.html
(3) Apache module mod_headers
    http://httpd.apache.org/docs/mod/mod_headers.html
