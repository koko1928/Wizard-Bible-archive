x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x

--- 第○章: 基礎暗号学講座 〜 第8回 〜 ---

著者：IPUSIRON

x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x


■0x01.) はじめに

　こんばんは、IPUSIRONです。
　今回のWBは合併号なので、2ヶ月ぶりのリリースとなります。ちょっと間隔が空
いたので、前回の内容（群・環・体から始まって、拡大体まで解説した）を忘れ
た方もいるかもしれません。今回は暗号の花形ともいえる公開鍵暗号系の解説に
なりますが、実は前回の内容を使っていないので、安心して読んでください。

　それではさっそく解説に入ります。


■0x02.) 公開鍵暗号系とは

　暗号化のための鍵を公開して、復号のための鍵のみを秘密にする暗号系を公開
鍵暗号系（スキーム）と呼びます。公開鍵から秘密鍵を計算することは困難なの
で、敵は暗号文を解読することはできません。

（図）http://security2600.sakura.ne.jp/main2/image1/p.jpg

　公開鍵暗号系は応用面は広く、盛んに研究されている分野です。例えば、デジ
タル署名や鍵配送などでも活躍しています。


■0x03.) 共通鍵暗号系 vs 公開鍵暗号系

　暗号化方式を大別すると共通鍵暗号系と公開鍵暗号系に分けることができます。
共通鍵暗号系についてはすでにWBでも紹介しました。どちらとも一長一短があり、
状況に応じて使い分けられます。一般的に言われている特徴を次に列挙します。

●共通鍵暗号系

・処理速度が速い。
・鍵配送問題を解決するのが大変。
・鍵の総数が多く、管理が大変。
・量子コンピュータが実現しても、鍵長を2倍にすれば安全性を維持できる。

●公開鍵暗号系

・鍵配送問題を用意に解決できる。
・鍵の総数が少なくてすむ。
・NP-Pに属する問題を利用している。数論的問題、格子に関する問題、多項式の
零点問題などが含まれる。コンピュータと相性がよい数論的問題を利用している
タイプの暗号が多いが、数論的問題は量子PCに弱い。


■0x04.) 公開鍵暗号系の構成

　公開鍵暗号系は次の3つのアルゴリズムから構成されます。

・鍵生成アルゴリズム
・暗号化アルゴリズム
・復号アルゴリズム

　公開鍵暗号系の仕様を定義しろといったら、この3つをきちんと述べる必要があ
るわけです。アルゴリズムなので入出力を明確にし、復号アルゴリズムではアル
ゴリズムの仕様通りに動けばきちんと暗号文から平文に変換できていることを確
かめる必要があります。

●鍵生成アルゴリズムG

　1^k（kはセキュリティパラメータ）を入力として、公開鍵pkと秘密鍵skを出力
します。

（図）http://security2600.sakura.ne.jp/main2/image1/p_g.jpg

　公開鍵pkを公開情報としてします。正当な暗号文の受信者はもちろんのこと、
敵であっても読めるわけです。
　秘密鍵skは暗号化アルゴリズムを使う者だけが利用し、秘密にしておきます。
　1^kというのは1のkビット列であり、これをGに入力することで、2進数の桁を教
えていることになるわけです。なぜkを入力とせずに1^kを入力しているのかとい
うと、アルゴリズムは一種のチューリングマシンと考えることができ、kが入力さ
れてしまうとチューリングマシンは使用する数値の桁数はlog(k)と解釈してしま
いまずいからです。k桁で考えたいわけなので、わざわざ1^kを入力しているわけ
なのです。

●暗号化アルゴリズムE

　（暗号文の）送信者Aは、受信者Bの公開鍵pk_Bを用いて、平文mから暗号文cを
作ってから、それをBに送ります。

（図）http://security2600.sakura.ne.jp/main2/image1/p_e.jpg

●復号アルゴリズムD

　Bは復号アルゴリズムDと自分の秘密鍵sk_Bを用いて、暗号文cから平文mに復号
します。

（図）http://security2600.sakura.ne.jp/main2/image1/p_d.jpg


■0x05.) 合同式

　暗号の世界では合同式という概念がよく登場するので、合同式とは何か説明し
ます。まず合同式の定義は次の通りです。

[定義]
整数a,bの差が0または正の整数Nの倍数であるとき、「a≡b (mod n)」と記述し、
aとbとはnを法として合同であるといい、このような関係式を合同式と呼びます。

　この定義ですぐに理解できなければ、次に示す例により、合同式の世界に慣れ
てもらえればと思います。私も具体例からその世界に慣れて、今では合同式の世
界が身近になった口です。

　いくつか例を出しましょう。

・5≡2 (mod 3)
・13≡6 (mod 7)
・4≡0 (mod 2)
・10≡1 (mod 3)

　一番最初の例は、5を3で割ると2が余るという意味です。つまりmod 3という世
界では5も2もイコール（通常のイコール「＝」と区別するために「≡」という記
号を使う）になるわけです。このイコールになることを「合同」といいます。
　また、4番目の例を見るとmod 3の世界では10も1も合同になっています。もちろ
ん4も7も1と合同になります。

　2つの合同式があったとき（ただし、両方とも同じ法を持つとする）、左辺と右
辺をそれぞれ加えたり・掛けても合同は保持されます。きちんとそれを定理とし
て書くと次のようになります。

[定理]
「a≡a' (mod n)」かつ「b≡b' (mod n)」のとき、次が成り立つ。
・a±b≡a'±b' (mod n)
・ab≡a'b' (mod n)

　定義からすぐに証明できますが、ここでは具体的な数値例で考えてみます。
　まず「5≡2 (mod 3)」かつ「7≡1 (mod 3)」のときを考えます。このとき、足
し算・引き算・掛け算の3つの場合を考えてみます。

[1]足し算
（左辺）=5+7=12 (mod 3)≡0 (mod3)
（右辺）=2+1=3 (mod 3)≡0 (mod 3)

　よって、（左辺）＝（右辺）が成り立っており、足し算における上記の定理の
妥当性がわかります。

[2]引き算
（左辺）=5-7=-2 (mod 3)≡1 (mod3)
（右辺）=2-1=1 (mod 3)

　よって、（左辺）＝（右辺）が成り立っており、引き算における上記の定理の
妥当性がわかります。

[3]掛け算
（左辺）=5×7=35 (mod 3)≡2 (mod3)
（右辺）=2×1=2 (mod 3)

　よって、（左辺）＝（右辺）が成り立っており、掛け算における上記の定理の
妥当性がわかります。

　以上で合同式の基本的な計算は理解できたと思います。それでは次に、mod nの
世界を集合として考えてみましょう。

[定義]
{0,…,n-1}の整数の集合をZn（Zは太文字、nは添え字）という記号で表されます。
即ち、次のような関係が成り立ちます。
Zn={0,…,n-1}

　つまり、mod nの世界の要素たちは0,1,2,…,n-1のn個が存在するということで
す。例えば、mod 4の世界は0,1,2,3という4つの要素が存在し、mod 4の世界全体
であるZ4は{0,1,2,3}の集合と同等です。

　このZnの右肩に*（スター）が付くと、Znからnと素な要素だけを取り出した集
合になります（ただし、0は除外しておく）。きちんと定義すると次のようになり
ます。

[定義]
{1,…,n-1}のうち、nとの最大公約数が1（即ち、nと互いに素）である整数の集合
をZn^*で表します。つまり、次の関係式が成り立ちます。
Zn^*={x|1≦x≦n-1,gcd(x,n)=1}　←（nを法とする）既約剰余類

　例えば、mod 6のときのZ6とZ6^*を考えてみましょう。
　Z6のほうは簡単です。0からカウントしてn-1=6-1=5までのすべての整数を要素
とする集合であるわけなので、Z6={0,1,2,3,4,5}となります。
　問題はZ6^*です。n=6と素である要素をZ6から抽出しましょう。各要素について
きちんと見ていきます。

・0⇒除外して考える。
・1と6は互いに素⇒Z6^*の要素になる。
・2と6は両方とも2で割れる⇒Z6^*の要素にならない。
・3と6は両方とも3で割れる⇒Z6^*の要素にならない。
・4と6は両方とも2で割れる⇒Z6^*の要素にならない。
・5と6は互いに素⇒Z6^*の要素になる。
・6と6は両方とも6で割れる⇒Z6^*の要素にならない。

　よって、1と5だけがZ6^*の要素となります。よって、Z6^*={1,5}となります。

　次はmod 7のときのZ7とZ7^*を考えてみてください。結果からいうと、Z7={0,1
,2,3,4,5,6}、Z7^*={1,2,3,4,5,6}となります。各自確かめておいてください。

　実はmod nのnの値が素数か素数じゃないかで、Zn^*が大きく異なります。nが素
数ならば、Zn^*はZnから単に0を除外したものになります。暗号では主にnが素数
であるときを考えていきます。


■0x06.) 素数

[定義]
2以上の整数pが、1とp自身以外に約数を持たないときに、pを素数といいます。

　例えば、2,3,5,7,11,13,…があります。余談ですが、100以下の整数のうち素数
は25個あるという事実は覚えておくと結構便利ですので、きちんと自分でカウン
トしてみてください。

　素数というのはとても魅力的な性質を持っており、多くの数学者を魅了してい
ます。その中でもっとも基本となるフェルマーの小定理（フェルマーの大定理で
はないので注意）を紹介します。このフェルマーの小定理は今後暗号の計算にお
いてよく登場するので、知っておくとかなり後が楽です。いきなり定理の中身を
紹介してもつまらないので、ここでは数値実験から入っていきます。

　例えばp=7として、a=1からp-1までの整数について、mod pでべき乗（何回も同
じ数値で掛け算していくこと）して、観察してみます。その結果を表にまとめる
と次のようになります。

a   | 1 | 2 | 3 | 4 | 5 | 6 
----------------------------
a^1 | 1 | 2 | 3 | 4 | 5 | 6 
----------------------------
a^2 | 1 | 4 | 2 | 2 | 4 | 1 
----------------------------
a^3 | 1 | 1 | 6 | 1 | 6 | 6 
----------------------------
a^4 | 1 | 2 | 4 | 4 | 2 | 1 
----------------------------
a^5 | 1 | 4 | 5 | 2 | 3 | 6 
----------------------------
a^6 | 1 | 1 | 1 | 1 | 1 | 1 
----------------------------
a^7 | 1 | 2 | 3 | 4 | 5 | 6 
----------------------------

　まず表の見方を説明します。1行目はaの1〜6（=p-1=7-1）の値になり、縦にそ
の値をどんどん掛けていくことになります。あくまでmod 7で考えていくので、す
べての数値は6以下の値になっています。

　次に、pが合成数のときを考えましょう。pといったら普通素数（prime）を意味
してしまうので、ここでは合成数であることを意味するためにhとしておきます。

　例えば、合成数h=8として、mod hでべき乗して、観察してみます。

--------------------------------
a   | 1 | 2 | 3 | 4 | 5 | 6 | 7 
--------------------------------
a^1 | 1 | 2 | 3 | 4 | 5 | 6 | 7 
--------------------------------
a^2 | 1 | 4 | 1 | 0 | 1 | 4 | 1 
--------------------------------
a^3 | 1 | 0 | 3 | 0 | 5 | 0 | 7 
--------------------------------
a^4 | 1 | 0 | 1 | 0 | 1 | 0 | 1 
--------------------------------
a^5 | 1 | 0 | 3 | 0 | 5 | 0 | 7 
--------------------------------
a^6 | 1 | 0 | 1 | 0 | 1 | 0 | 1 
--------------------------------
a^7 | 1 | 0 | 3 | 0 | 5 | 0 | 7 
--------------------------------
a^8 | 1 | 0 | 1 | 0 | 1 | 0 | 1 
--------------------------------

　pが素数のときと異なり不規則になっています。0が登場するので、a^7の行でa
の値に限らずすべてが1になるということはありえません。

　さらに、p=5（素数）の整数について、mod pでべき乗して観察してみます。

--------------------
a   | 1 | 2 | 3 | 4 
--------------------
a^1 | 1 | 2 | 3 | 4 
--------------------
a^2 | 1 | 4 | 4 | 1 
--------------------
a^3 | 1 | 3 | 2 | 4 
--------------------
a^4 | 1 | 1 | 1 | 1 
--------------------
a^5 | 1 | 2 | 3 | 4 
--------------------

　上記のpが素数のときの2つの表から似たような結果が見えます。p=7の表ではa^6
の行がすべて1になっています。またp=5の表ではa^5の行がすべて1になっていま
す。実はpが素数の場合、a^(p-1)のとき必ず1になるという結果が知られています。
これがフェルマーの小定理です。きちんと定理としてまとめると次のようになり
ます。

[定理]フェルマーの小定理
p：素数、a∈Zp^*
⇒∀a；a^(p-1)≡1 (mod p)

　ここでは証明については省きます。それよりも実際の使い方をマスターしてお
きましょう。このフェルマーの小定理を使うとmod pのべき乗計算をするときに楽
にできるのです。
　例えば、x≡123^45 (mod 13)を計算したいとします。

x
≡123^45 (mod 13)
≡6^45 (mod 13)　（∵123≡6 (mod 13)）
≡6^(12×3+9) (mod 13)　（∵フェルマーの小定理より「6^12≡1 (mod 13)」が
成り立つので、12でまとめておく）
≡{(6^12)^3}×(6^9)
≡(1^3)×(6^9)　←ここがポイント。1は何乗しても1になるから、値が小さくな
っている。
≡6^9
≡5 (mod 13)


■0x07.) 位数と原始元

　位数という概念の定義を紹介します。

[定義]
p：素数、a∈Zp^*；
a^x≡1 (mod p)となる最小の正整数xをaの位数といい、x=ord_p(a)と表します。

　これも具体例を見たほうがわかるでしょう。p=5の表で考えてみます。これはす
でに登場したので、それを再び表しておきます。

--------------------
a   | 1 | 2 | 3 | 4 
--------------------
a^1 | 1 | 2 | 3 | 4 
--------------------
a^2 | 1 | 4 | 4 | 1 
--------------------
a^3 | 1 | 3 | 2 | 4 
--------------------
a^4 | 1 | 1 | 1 | 1 
--------------------
a^5 | 1 | 2 | 3 | 4 
--------------------

　a=2のところを列で見ていくと、a^4のときに初めて1になっていることがわかり
ます。よって、ord_5(2)=4と表記されます。
　次にa=3のときも、a^4のときに初めて1になっていることがわかります。よって、
ord_5(3)=4と表記されます。
　それでは、a=4のときはどうでしょうか。a^4のときに1になっているのは当然と
して（フェルマーの小定理が成り立つから）、a^2のときに初めて1になっている
ことがわかります。よって、ord_5(4)=2と表記されます。

　位数とセットで知っておくべき概念として原始元というものがあります。これ
は位数がp-1となるときの値aのことです。これも上記のp=5の例で考えてみましょ
う。

・ord_5(2)=4
・ord_5(3)=4
・ord_5(4)=2

　原始元はp-1となる値aということなので、4（＝p-1=5-1)となる値は2と3です（
括弧の中の値が原始元と覚えておけばよい）。つまり、Z5^*の原始元は2,3という
ことになります。きちんと表で落ち着いて考えれば、難しくないと思います。

　原始元の定義を理解したところで、それに関する定理をひとつ紹介します。

[定理]
p：素数
g：Zp^*の原始元とする。
このとき、a_i=g^i (mod p)（i=0,…,p-2)とおくと、次が成り立つ。
{a0,a1,…,a_(p-2)}={1,2,…,p-1}

　この定理の証明は省略するとして、再び具体例で考えてみましょう。p=5のとき
ですでにわかっている事実を次に列挙します（ここまで読んできたならわかるは
ず）。

・p=5
・Zp={0,1,2,3,4}
・Zp^*={1,2,3,4}
・原始元g∈Z5^*
・g=2,3

[1]g=2のとき

・a0≡g^0≡2^0≡1 (mod 5)
・a1≡g^1≡2^1≡2 (mod 5)
・a2≡g^2≡2^2≡4 (mod 5)
・a3≡g^3≡2^3≡8≡3 (mod 5)

　よって、{a0,a1,a2,a3}={1,2,4,3}={1,2,3,4}が成り立っていることがわかりま
す。

[2]g=3のとき

・a0≡g^0≡3^0≡1 (mod 5)
・a1≡g^1≡3^1≡3 (mod 5)
・a2≡g^2≡3^2≡4 (mod 5)
・a3≡g^3≡3^3≡27≡2 (mod 5)

　よって、{a0,a1,a2,a3}={1,3,4,2}={1,2,3,4}が成り立っていることがわかりま
す。

　いずれにしても、gの値がいずれにしても定理が必ず成立することが確かめられ
ました。

　実はもっと位数とオイラー関数の関係、巡回群などと解説したいのですが、今
回の記事ではこのぐらいで十分なので止めておきます。


■0x08.) 離散対数問題とElGamal暗号

　公開鍵暗号系はたくさん存在します。例えば、RSA暗号・ElGamal（「エルガマ
ル」と呼ぶ）暗号・Rabin暗号・逆数暗号などがあります。今回は特に仕様が簡単
なElGamal暗号について解説します。

　ElGamal暗号とは離散対数問題の困難さに基づく暗号です。離散対数問題（DLP
）とは、p,g,a=g^x (mod p)から、xを知る問題のことです。

（図）http://security2600.sakura.ne.jp/main2/image1/DLA.jpg

・p：素数
・g：Zp^*の原始元
・a：Zp^*の元
・x：{0,1,…,p-2}のどれかになる

　一般にpが大きくなるほどこの問題は困難になっていきます。

　例えば、3≡2^x (mod 5)という合同式を満たすxを求めたいとします。xの取り
得る値は0,1,2,3のいずれかであるので、すべて代入して確かめればよいのです。

[1]x=0のとき、（右辺）＝2^0=1≠（左辺）
[2]x=1のとき、（右辺）＝2^1=2≠（左辺）
[3]x=2のとき、（右辺）＝2^2=4≠（左辺）
[4]x=3のとき、（右辺）＝2^3=8≡3=（左辺）

　よって、x=3であることがわかる。これはp=5と小さい値なので、総当りでも4つ
の場合を調べればよかったわけですが、pの値が200桁ぐらいになってしまうと途
端に難しくなってきます。実際に今のところ離散対数問題を効率的に解くアルゴ
リズムは見つかっていません。そのようなアルゴリズムは将来的にも見つからな
いだろうという仮定を離散対数仮定（DLA）といいます。これから解説するElGam
al暗号はこの離散対数仮定を前提としています。

　やっと具体的な暗号の解説に入る準備ができました。それでは本題のElGamal暗
号について解説します。ElGamal暗号は公開鍵暗号系なので、次の3つのアルゴリ
ズムから定義されます。

[1]鍵生成アルゴリズム

　受信者Bは、まず大きな素数pとZp^*の原始元gを選びます。次に、x∈Z_(p-1)を
ランダムに選び、y=g^x (mod p)を計算します。
　受信者Bは公開鍵pk=(p,g,y)を送信者Aに公開し、秘密鍵sk=xは秘密に保持しま
す。

[2]暗号化アルゴリズム

　送信者Aは、受信者Bの公開鍵pkと平文m∈Zpを入力として、暗号文C=(c1,c2)を
次のように求めます。r∈Z_(p-1)をランダムに選び、c1,c2を次のように計算する。

・c1=g^r (mod p)
・c2=my^r (mod p)

　この2つのペアをセットとして、受信者Bに送ります。

[3]復号アルゴリズム

　受信者Bは暗号文C=(c1,c2)を受信したら、次のように計算して平文mを復号しま
す。

m=c2×c1^(p-1-x) (mod p)

　以上の3つのアルゴリズムをまとめると次のようになる。このように図で表現す
ると一目瞭然だろう。

（図）http://security2600.sakura.ne.jp/main2/image1/elgamal_alg.jpg

　この段階で3つのアルゴリズムが定義されたわけだが、まず始めにやるべきこと
は復号アルゴリズムで本当にmが正しく復号されているかを確認することです。こ
れが確認できて初めて、アルゴリズム自体の正当性がいえます。つまり、c2×c1
^(p-1-x) (mod p)という計算をして、式変形をして本当にmになるかどうかという
こをと見ていきます。

c2×c1^(p-1-x) (mod p)
=(my^r)×(g^{r(p-1-x)})
=(mg^rx)×(g^{r(p-1-x)})　（∵y=g^x）
=mg^r(p-1) (mod p)
≡m×1^r　（∵フェルマーの小定理より「g^(p-1)≡1 (mod p)」）　←ここがポ
イント
=m (mod p)

　もっとElGamal暗号について知るために、色々な状況を想定してみましょう。ま
ずElGamal暗号の暗号化アルゴリズムの中身を見てみると、乱数を生成して利用し
ている。もし平文を暗号化する度にこの乱数が毎回ランダムに選ばれずに、常に
一定ならばどうなるでしょうか。これは現実でもありえる現象といえます。ElGa
mal暗号のプログラム設計において、乱数を取り得る範囲を狭い場合、偶然次の暗
号化でも同じ乱数になってしまう可能性があるからです。
　それでは、これをきちんと考えてみます。2つの平文m1,m2のそれぞれの暗号文
をc1={a1,b1},c2={a2,b2}とします。ここで、a1≡g^r、a2≡g^rが成り立ちます。
1回目の暗号化と2回目の暗号化で同じ乱数を使うので、これをrと固定しておくと、
a1=a2となります。つまり、c1={a,b1},c2={a,b2}となります。
　m1=b1/yより、y^r≡b1/m1 (mod p)が成り立ちます。一方、y^r≡b2/m2 (mod p)
が成り立ちます。よって、この2式より、b1/m1≡b2/m2が成り立ちます。
　このとき、何らかの方法で、c1={a,b1}の平文m1を何らかの方法で奪われてしま
うと、b1,b2は既知なので、m2までばれてしまいます。つまりこうした特殊な状況
下において、芋づる式に2回目の暗号化における平文まで敵にばれてしまうわけで
す。これでは安全とはいえないわけです。

　次に考えるべき状況は、pの値が小さい場合です。例えば、公開鍵がpk=(p,g,y)
=(5,2,3)であるElGamal暗号を破ろうとする敵がいたとします。
　すると、敵は「3≡2^x (mod 5)」を満たすxを解こうとします。xはZ_(p-1)=Z_
(5-1)=Z4={0,1,2,3}の集合の要素なので、この4つの数字について総当りで式を満
たすかどうか調べます。

・2^x≡2^0≡1⇒満たさない
・2^x≡2^1≡2⇒満たさない
・2^x≡2^2≡4⇒満たさない
・2^x≡2^3≡8 (mod 5)≡3⇒満たす

　よって、sk=x=3となります。つまり敵は総当りで離散対数問題を解いて、秘密
鍵が3だと絞り込めるわけです。
　このとき、もし敵が暗号文c=(4,2)を盗聴したとしたら、秘密鍵sk=3を用いて平
文mを求めることができます。

m
≡c2c1^(p-1-x) (mod p)
≡2×4^(5-1-3) (mod 5)
≡2×4^1
≡8
≡3

　よって、暗号文cの平文mは3と計算できます。以上のことから、pの値は大きく
設定しなければならないということがわかります。


■0x09.) 終わりに

　普通は公開鍵暗号系といえばRSA暗号などが最初に来るものですが、今回はあえ
てElGamal暗号を解説しました。それはRSA暗号よりもElGamal暗号のほうが安全で
あるということもありますが、合同式と素数という重要な数学的概念をちょうど
この機会に解説と思ったからです。RSA暗号に関しては後ほどきちんと解説します
ので、安心してください。
　次回はDH鍵配送について解説します。実はElGamal暗号とDH鍵配送は面白い関係
性も持っており、そのためこのようなあえて変則的な流れにしています。

　では、また来月会いましょう。


