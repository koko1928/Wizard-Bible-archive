x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x

--- 第○章: SPAMボット対策 ---

著者：金床

x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x


■0x01.) はじめに

　本稿では掲示板やブログに対し無差別に宣伝目的の書き込みを行う、いわゆる
SPAMボットを取り上げる。これらは主に英語圏で作成されており、自動的にウェ
ブページを巡回し、フォームタグを見つけると手当たり次第に書き込みを行う。
筆者の掲示板にも最近いくつかのSPAMボットが入り込んでくるようになったため、
対策を講じる必要に迫られた。


■0x02.) SPAMボットと砲台の違い

　SPAMボットはかつてアングラシーンで戦争をまきおこした「砲台」とは異なり、
特定の掲示板に対しての爆撃のような多重投稿は目的としていない。そのため、
対策もやや方向性が異なる。たとえば強度の弱いCAPTCHAでも十分対策ができる。
特定の掲示板を執拗に（自動化したプログラムで）荒らすことを目的としている
場合にはCAPTCHAの画像を自動的に解析しそこを突破するような技術が用いられる
可能性があるが、SPAMボットはそのようなことはしないと考えられる。


■0x03.) CAPTCHA

　前項で触れたが、CAPTCHAを用いればほぼ確実なSPAMボット対策になる。CAPTC
HA画像を解析するほどの高度なSPAMボットの登場はまだまだ先となるだろう。た
だし、俗に「エログリッド」などと呼ばれる仕組みが投入された場合はこの限り
ではない。
　しかし、CAPTCHAにはユーザビリティの面で難点がある。ちょっと書き込みた
いだけなのにわざわざ数字や文字を読みとり、さらにそれを入力するのはとても
面倒であるため、（特に無意識のうちに）ユーザが書き込みを避けてしまう可能
性がある。コメント欄への書き込みは反射的に行いたい。思いついたことを一瞬
にして書き、書き終えたその瞬間に「投稿」ボタンを押下。書き込み終わった画
面を見てtypoに気づき「orz」状態。これが望ましい姿である。画像から文字列を
読みとっているとその掲示板なりブログなりに生じている「空気」が逃げてしま
うような気がするのは筆者だけだろうか。
　このような理由から、可能ならばCAPTCHA以外の、ユーザビリティに優れた対策
が好ましい。


■0x04.) JavaScript

　掲示板やブログのコメント欄のような書き込みが生じる場面では、「書き込み
前」の画面と、「書き込む先」の画面が存在する（以下「画面1」及び「画面2」
とよぶ）。ここでユーザに対してJavaScriptの使用を強制できる場合には、画面
1においてJavaScriptのコードが動作しない場合コメントが投稿できないようにす
るという手法が考えられる。例えば次のようなものだ。

-----
<FORM ...>
 <INPUT TYPE="HIDDEN" NAME="js" VALUE="js">
（略）
</FORM>

<script>
document.forms[0].js.value="ss";
</script>
-----

　SPAMボットがJavaScriptを解釈しない場合には、「js=js」というパラメータが
送信される。一方でJavaScriptを有効にしているユーザのウェブブラウザからは
「js=ss」というパラメータが送られる。この部分を画面2において判別すること
で、多くのSPAMボットを遮断できる。
　この方法のメリットはかなりの有効性があることと、ユーザビリティに優れて
いることだ。そしてデメリットはJavaScriptを有効にしていないと書き込みがで
きなくなってしまうことにある。そのため、もともとJavaScriptが有効でないと
利用できないように作られたウェブアプリケーションでは十分に実用的な対策と
なる。


■0x05.) Cookie

　同じようにCookieを利用する方法も考えられる。しかしSPAMボットにはCookie
に（不完全ながら）対応しているものも多く見られるため、ただ単に画面1でCoo
kieを発行し、それを画面2で確認するという方法は回避されてしまう可能性が高
い。そこで、Cookieの細かな仕組みを利用するのがよいだろう。
　例えば次のように、domain属性に間違った値（ウェブサイトのホストとは異な
る値）を指定する。

-----
Set-Cookie: foo=bar; Path=/; Domain=.foobar
-----

　domain属性の値が不正なため、ウェブブラウザはこのCookieを受け入れない。
一方で実装が甘いSPAMボットでは受け入れてしまうかもしれない。このような細
かな点を付くことで、Cookieを利用する対策も可能である可能性はある。

　Cookieを利用する方法のメリットおよびデメリットはJavaScriptの場合とほぼ
同じである。


■0x06.) 文字参照

　文字参照とはHTML中で使用されるいわゆるエスケープ処理のことだ。XSS対策で
シングルクオートを「&#39;」に変換する例がよく知られている。これを次のよう
に使う。

-----
<FORM>
 <INPUT TYPE="HIDDEN" NAME="param1" VALUE="&#12354;">
（略）
</FORM>
-----

　ここで「&#12354;」の部分が文字参照によって記述されたデータだ（12345では
なく12354であることに注意）。「&#12354;」は日本語のひらがなの「あ」のこと
である（http://www.fileformat.info/info/unicode/char/3042/index.htm）。そ
のため、意味としては次のように記述されている場合と等しい。

-----
<FORM>
 <INPUT TYPE="HIDDEN" NAME="param1" VALUE="あ">
（略）
</FORM>
-----

　ウェブブラウザがフォームを実行する際に、この「あ」はさらにURLエンコード
されて送られる。例えばShift_JISを用いているページであれば、この値はリクエ
スト中で「param1=%82%A0」となる。つまりここでは以下の処理が行われる。

・&#12354;が「あ」であると認識する
・ページの文字コードがShift_JISであると認識する
・「あ」のURLエンコードが必要であると認識する
・「あ」をURLエンコードして「%82%A0」とする

　この4つのステップは通常のウェブブラウザは問題なく行うが、SPAMボットには
なかなか難しい処理となる。12354が「あ」であることを認識するためにはUnico
deに対応している必要があるし、さらにShift_JISという日本語の文字コードにも
対応している必要があるからだ。そのため、画面2においてparam1の値が「%82%A
0」でない場合の書き込みを拒否することで対策となる。

　筆者はいくつかのウェブアプリケーションでこの方法を試してみたが、これを
突破したボットは今のところ存在しない。
　この方法はJavaScriptやCookieを用いる場合のデメリットであった「ユーザが
設定を有効にしていないと書き込みできない」という点をクリアする。JavaScri
ptとCookieがともに無効であっても正しく書き込みが可能であり、この点が大き
なメリットとなる。また、もちろんCAPTCHAの読み込みのような無駄なステップが
不要となり、ユーザビリティにも優れているといえるだろう。


■0x07.) まとめ

　このように、8-1においてはBボタンをほぼ押しっぱなしで駆け抜ける疾走感が
何より大事であることがわかった。ただし、後半の2連続ジャンプが必要となる箇
所ではあえてBダッシュは使用せず、落ちる寸前まで通常の歩行で近づいてからジ
ャンプすることで、確実にクリアーできる。SPAMボットでの書き込みに辟易して
いる管理者の方々には是非文字参照の方法をテストしてほしい。もちろんこれも
「いたちごっこ」であり、SPAM業者がこの方法を認識する時点で使えなくなる方
法ではある。しかし特に海外からやってくるボットにはしばらくの間は有効なの
ではないかと考えている。

　読者を代表してひとこと

　「　ま　た　小　細　工　か　(`Д´)ノ　ゴ　ラ　ァ　」


