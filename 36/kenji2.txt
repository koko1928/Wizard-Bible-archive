x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x

--- 第○章: Windowsシステムプログラミング 番外編 〜Java〜 ---

著者：Kenji Aiko

x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x


■0x01.) はじめに

　Javaアプリケーションは、VM上で動作するというその性質上、デコンパイル（
実行ファイルからソースコードに復元すること）を容易に行える。そのため、ク
ラック行為に対して、それほど強固ではないと言われている。
　今回は、この事実を確かめるために、実際に製品として販売、配布されている
Javaアプリケーションを例にシリアルクラックを行った。ただし、製品名を出す
わけにはいかないため、このテキストでは、伏せさせていただくことにする。


■0x02.) 概要

　このソフトウェアには使用期限があり、それを過ぎると、シリアルナンバーを
入力しなければアプリケーションを使用できなくなる。よって、このアプリケー
ションをクラックするには、次の2つのいずれかの方法が必要となる。

（1）シリアルナンバーを特定する
（2）時間制限を解除する

　どちらでもよいが、大抵は、やりやすい簡単な方法を選ぶことになる。ただし、
どちらが簡単かは、実際にやってみなければ分からないため、とりあえずは両方
に焦点を当てて進めていく。


■0x03.) OllyDbg

　プログラムをOllyDbg上で起動させ、適当にステップを進めていくと、ある場所
から、OllyDbg内の処理に関わらず、プログラムが進み始めることが確認できる。
つまり、別のプロセスが生成され、それが起動しているわけだ。この事実から、
内部でCreateProcess関数が呼び出されていると想像できる。
　少し詳細に処理を追っていくと、CreateProcessが呼ばれている場所が見つかる。

-----  OllyDbg
00402B9B  |. 52             PUSH EDX
00402B9C  |. 6A 00          PUSH 0
00402B9E  |. FF15 14004100  CALL DWORD PTR DS:[<&KERNEL32.CreateProccessW>]
00402BA4  |. 85C0           TEST EAX,EAX
-----

　ここで、CreateProcessに渡されている引数を確認すると、どうやらJavaVM（j
avaw）が起動しているようだ。
　つまり、このプログラムはあくまでも起動時のみ実行されるだけのもので、本
物のアプリケーションとなるメインのプログラムは、Javaで記述されており、Cr
eateProcessで別プロセスとして動くわけだ。


■0x04.) シリアルナンバーの認証

　CreateProcessで起動した新しいプロセス（javaw）は、ウィンドウが表示され
ると、最初に、シリアルナンバーを要求してくる。ここで、現在の日時を取得し、
もし指定の期間を過ぎていたら、アプリケーションを使わせないようになってい
る。
　試しにWindowsの時間を少し進めて、再度プログラムを起動すると、指定の時間
が過ぎたことになり、アプリケーションが使えなくなる。逆に時間を戻すと、ま
たアプリケーションが使えるようになる。
　つまり、このアプリケーションの認証は、Windowsの時間に従っている。
　ということは、時間取得系のAPIにブレイクポイントを仕掛ければ、何かヒント
が得られるかもしれない。時間取得系のAPIを探す。

・GetSystemTime
・GetLocalTime
・GetSystemTimeAsFileTime

　これらの関数にブレイクポイントを仕掛ける。


■0x05.) JavaVM

　実行ファイルはただの飾りであり、内部で新たなプロセスが生成されている。
そして、そのプロセスはJavaVMであり、それが起動した状態で、様々なウィンド
ウが生成されていく。つまり、事実上の本体はJavaで作られている。
　タスクマネージャーでプロセスを確認すると、javawの起動が確認できる。「本
体はこっちか！」というわけで、起動中のjavawにOllyDbgでアタッチする。そし
て、時間取得系のAPI群にブレイクポイントを仕掛ける。すると、いい感じにブレ
イクポイントに引っかかる。

-----  OllyDbg
080ACC4A   50            PUSH EAX
080ACC4B   FF15 68600E08 CALL DWORD PTR DS:[<&KERNEL32.GetSystemTimeAsFileTime>
080ACC51   FF75 FC       PUSH DWORD PTR SS:[EBP-4]
-----

　GetSystemTimeAsFileTime関数が時間取得に利用されていることが分かる。ただ
し、Javaのコードが直接APIを呼び出しているとは考えにくい。おそらく、このA
PIは、JavaVMによって呼び出されているはずだ。呼び出し元のモジュール名を確
認すると、jvmとなっている。そして、このモジュールはjvm.dllとして存在する。


■0x06.) jvm.dll

　問題箇所は特定できた。あとはバイナリレベルで変更を加えればOKだ。
　jvm.dllはkernel32.dllをインポートしている。そして、kernle32.dllはGetSy
stemTimeAsFileTimeをエクスポートしている。よって、まずは、jvm.dllをバイナ
リエディタで開き、KERNEL32.dllの箇所をLERNEL32.dllに変更する。
　続いて、C:\WINDOWS\system32以下からkernel32.dllをコピーしてきて、バイナ
リエディタで開き、GetSystemTimeAsFileTime関数を都合のよいように書きかえる。

-----  kernel32.dll（変更前:GetSystemTimeAsFileTime関数）
00000BE0                 8B FF 55 8B EC A1 18 00 FE 7F 8B 
00000BF0  15 14 00 FE 7F 3B 05 1C 00 FE 7F 75 ED 8B 4D 08 
00000C00  89 11 89 41 04 5D C2 04 00 90 90 90 90 90
-----

-----  kernel32.dll（変更前:GetSystemTimeAsFileTime関数）
008717E5 >/$ 8BFF           MOV EDI,EDI
008717E7  |. 55             PUSH EBP
008717E8  |. 8BEC           MOV EBP,ESP
008717EA  |> A1 1800FE7F    /MOV EAX,DWORD PTR DS:[7FFE0018]
008717EF  |. 8B15 1400FE7F  |MOV EDX,DWORD PTR DS:[7FFE0014]
008717F5  |. 3B05 1C00FE7F  |CMP EAX,DWORD PTR DS:[7FFE001C]
008717FB  |.^75 ED          \JNZ SHORT lernel32.008717EA
008717FD  |. 8B4D 08        MOV ECX,DWORD PTR SS:[EBP+8]
00871800  |. 8911           MOV DWORD PTR DS:[ECX],EDX
00871802  |. 8941 04        MOV DWORD PTR DS:[ECX+4],EAX
00871805  |. 5D             POP EBP
00871806  \. C2 0400        RETN 4
-----

　GetSystemTimeAsFileTime関数は、引数の構造体（8バイト）に、100ns（ナノセ
カンド）単位の時間を入れる。上記のバイナリを見て分かるとおり、EAXレジスタ
に上位4バイト、EDXレジスタに下位4バイトが入る。100nsが1なので、1秒は1000
0000、60秒は600000000（0x23C34600）となる。

-----  kernel32.dll（変更後:GetSystemTimeAsFileTime関数）
00000BE0                 8B FF 55 8B EC A1 18 00 FE 7F 8B 
00000BF0  15 14 00 FE 7F 3B 05 1C 00 FE 7F 75 ED 8B 4D 08 
00000C00  89 11 B8 E2 FA C7 01 89 41 04 5D C2 04 00 
-----

-----  kernel32.dll（変更後:GetSystemTimeAsFileTime関数）
008717E5 >/$ 8BFF           MOV EDI,EDI
008717E7  |. 55             PUSH EBP
008717E8  |. 8BEC           MOV EBP,ESP
008717EA  |> A1 1800FE7F    /MOV EAX,DWORD PTR DS:[7FFE0018]
008717EF  |. 8B15 1400FE7F  |MOV EDX,DWORD PTR DS:[7FFE0014]
008717F5  |. 3B05 1C00FE7F  |CMP EAX,DWORD PTR DS:[7FFE001C]
008717FB  |.^75 ED          \JNZ SHORT lernel32.008717EA
008717FD  |. 8B4D 08        MOV ECX,DWORD PTR SS:[EBP+8]
00871800  |. 8911           MOV DWORD PTR DS:[ECX],EDX
00871802  |. B8 E2FAC701    MOV EAX,1C7FAE2
00871807  |. 8941 04        MOV DWORD PTR DS:[ECX+4],EAX
0087180A  |. 5D             POP EBP
0087180B  \. C2 0400        RETN 4
-----

　変更方法は様々だが、今回はシンプルに、上位4バイトを固定値とした。これ
で、時間は進まなくなる。よって、いつまでも期限切れにならない。
　最後に、このファイルのファイル名をlernel32.dllとする。これで完了だ。
　jvm.dllはこの変更されたlernel32.dllを読み出し、このlernel32.dllがエクス
ポートしているGetSystemTimeAsFileTime関数を呼び出す。しかし、このGetSyst
emTimeAsFileTime関数は、上位4バイトが固定のため時間が進まない。つまり、永
遠に期限が切れないということになる。これでクラックは成功となる。


■0x07.) さいごに

　今回、偶然にも、金床さんと同じソフトウェアを解析（クラック）したらしく、
しかも、それぞれがまったく異なる方法でそれを成功させていたことから、遅れ
ながらも、WB vol36に本テキストを追加させてもらった。
　解析ひとつとっても様々なアプローチがあり、とても面白いと思う。機会があ
ればぜひともチャレンジしてみてはどうだろうか。


