x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x

--- 第3章: 初級解析講座（一風変わった登録方法 .NET版） ---

著者：右サイド

x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x


■0x01.) .NET Framework

　Ollydbgを使用して解析を行っているときに、たまにC#.NETやVB.NETを使ってい
るものが出てくる場合があります。それをOllyに突っ込んでみると、まったく解
析ができません。これはすべて.NET Frameworkが悪さをしているからです。イメ
ージとしては次のような感じになります。厳密ではないものすごくアバウトであ
るが、間違いがあったら教えてください。


                        ---------
                       | Program |
                        ---------
                            ||
                            ||
 ------------        ---------------         ------------
| Platform A |======|.NET Framework |======| Windows XP |
 ------------        ---------------         ------------


○具体的過ぎる例



                        ---------
                       |  日本人  |
                        ---------
                            ||
                            ||
 ------------        ---------------       --------
| フランス人 |======| バイリンガル |======| 宇宙人 |
 ------------        ---------------       --------


　C#（※1）をコンパイルしたもの（C#で書かれた言語）は、Win問わずいろいろ
なプラットフォームで動かせまずが、やはりプラットフォーム依存の物（Win32 
APIなど）を使用するため、.NET Frameworkを使用する物はMacなどでは動かせま
せん。LinuxではMonoというモノ（ギャグじゃないぞ！！）で動かせるそうですが、
依存しないコードを書けば事実上どのプラットフォームでも動かすことができま
す。Javaみたいでよいですね〜ｗ（使ったことはありませんけど）。

　もし、この説明がわかりにくかったら次のサイトを参考にすればわかると思い
ます。私の日本語能力じゃここが限界に近いです。

●参考になるところ

http://e-words.jp/w/.NET20Framework.html
http://www.atmarkit.co.jp/fdotnet/dotnetwork/index/index.html

●注釈

（※1）厳密にC#は、CLI（Common Language Infrastructure）という一種の実行
環境で動いています。.NET FrameworkはCLIを独自にWindows用に拡張したもので
す。


■0x02.) じゃあどうする？

　.NETの説明もしたので、Ollyで解析できないこともわかったはずです。

　では、次にどうしたらよいのでしょうか？
　これに対しては、Willさん（※1）がもうすでにWizard Bibleで解説済みである。
同じことをやっても仕方がない、というかネタがかぶってはまったく面白くも何
ともありません。てなわけで、今回は実用性がないというかパズル的な遊びをし
ようと思いま〜す。

●注釈

（※1） http://antiwmac.overclock.ch/public/will/


■0x03.) 遊びましょ！！

●用意する物
・Reflector for .NET
http://www.aisto.com/roeder/dotnet/
・Crack_me!!（今回は自作です）
http://www3.pf-x.net/~right-hand-side/RE/WB/CM_WB.zip


●解説

　恒例の、まずは起動！！
　すると、ピクロスみたいな画面と2つのボタンだけ。どう見てもやる気のかけら
が見えません。本当にありがとうございました。ひとつは登録ボタン、もうひと
つは終了ボタンです。わかりましたね？　チェックボタンをチェックしてもしあ
っていたら「正解」との文字がでます。不正解だった場合は「m9（＾Д＾）プギ
ャー!!」とあざ笑われます。非常に悔しいです。
　今回はどれをチェックしたら正解なのか、探ろうと思います。この時点で「m9
（＾Д＾）プギャー!!」とか思っているそこの貴方！！正解を自力で見つけてみな
さい！！普通では不可能です。なんせ33,554,432通り（＝2^25）あるんですから！！

　これを1秒間に1回試したとしても、

33554432（秒）/60（秒）= 559,240.533（分）
559240.533（分）/60（分）= 9,320.67555（時）
9,320.67555（時）/24（時）= 388.361481（日）…約一年とちょい

　あなたは、これだけ時間を費やせますか？

　NEETでも不可能ですね。
　それでは早速閉じて、速攻でReflectorに突っ込んでみてください。ここから先、
多少プログラミングの知識が必要です。
　そうしたら、次のように展開してください。

（図）http://www3.pf-x.net/~right-hand-side/RE/WB/Reflector.png

　「button1_Click」のところにはいろいろな処理が書かれています。
　「button2_Click」のところには「Application.Exit();」というのが書かれて
いますのでアプリを終了という意味になります。
　今回はボタンが2つしかなかったから命拾いしたのですが、いっぱいあった場合
は根性が必要です。これはどうすることもできません。
　それでは「button1_Click」のところを中心に攻めていきたいと思います

　まず、ざ〜と見てみるとif文があるのに気付きます。まあ、ここが分岐で正解
か不正解かの分かれ目になります。ちなみに、「\u6b63\u89e3\uff01\uff01」が
「正解！！」、「m9\uff08\uff3e\u0414\uff3e\uff09\uff8c\uff9f\uff77\uff9e
\uff6c\uff70!!」が「m9（＾Д＾）プギャー!!」となっております。変換方法につ
いては、WillさんがWizard Bible vol.23で解説しております。

　今回は c_line_1関数のみ解説しますので、後は自力で見つけてください。解答
は最後に言います。

-----
：button1_Click
/////////////////////////////////////////////////////////////////////////////////////////////


int num1 = 0;
      num1 += this.c_line_1();
      num1 += this.c_line_2();
      num1 += this.c_line_3();
      num1 += this.c_line_4();
      num1 += this.c_line_5();
      if (num1 == 5)
      {
            MessageBox.Show("\u6b63\u89e3\uff01\uff01");
      }
      else
      {
            MessageBox.Show("m9\uff08\uff3e\u0414\uff3e\uff09\uff8c\uff9f\uff77\uff9e\uff6c\uff70!!");


/////////////////////////////////////////////////////////////////////////////////////////////
-----

　まず、「this.checkBox1.Checked」というのは、チェックボックスにチェック
が入っているかどうかをチェックするためのものです。もし、「this.checkBox1
.Checked == true」だとしたらチェックボックスにチェックが入っているという
ことになります。この場合は、最初の「if (this.checkBox1.Checked)」のところ
ではチェックが入っていれば、「num1++」するということになります。
　次のifでは「!」が入っているのでチェックボックスにチェックが入っていなけ
れば「num1++」をするということになります。
　この法則を守ってやっていくと、「○×××○」という風な感じになります。
　c_line_1〜5についても同様の考え方を適用していきます。

　正解は一番下に書いておきます。

-----
：c_line_1()
/////////////////////////////////////////////////////////////////////////////////////////////

private int c_line_1()
{
      int num1 = 0;
      if (this.checkBox1.Checked)
      {
            num1++;
      }
      if (!this.checkBox2.Checked)
      {
            num1++;
      }
      if (!this.checkBox3.Checked)
      {
            num1++;
      }
      if (!this.checkBox4.Checked)
      {
            num1++;
      }
      if (this.checkBox5.Checked)
      {
            num1++;
      }
      if (num1 == 5)
      {
            return 1;
      }
      return 0;
}



/////////////////////////////////////////////////////////////////////////////////////////////
-----


■0x04.) 正解と問題点

　この解析方法には多少問題が存在します。実は、この解析方法だと死人が出て
しまいます（嘘。問題点として、checkBoxがどのcheckBoxに対応しているかがわ
からないのです。ハンバーガーにピクルスが入っていないぐらい重大です！！こ
の問題点を利用して、チェックボックスを配置するときに適当に配置して、ON/O
FFをチェックする関数もバラバラにチェックするようにすれば解析は非常に困難
になります。
　誰か解決方法を知りませんか？


●解答！！

○×××○
×○×○×
××○××
×○×○×
○×××○

