x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x

--- 第3章: .NET APP Cracking 〜 バイナリを書き換えちゃいますのよ！！ 〜 ---

著者：右サイド

x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x


■0x01.) はじめに

　ヽ(゜∀゜)ノウンコー！ソフトウェアはクラックしても、女の子は製品版として使
いたい”うぃざーどばいぶる”の汚点右サイドでございます！！
　えーと今回はですね、前回のアホなレポートで得た不名誉（被害妄想）をこと
ごとくぬぐい去るために、別にすごくはないけどこれから解析環境が整うまで主
流になるであろう.NET APPのバイナリ書き換えによる解析方法を書きたいのじゃ
！！！！！！！！


■0x02.) 準備

　もう、いいよね。………そこまで辿り着いたら、準備してもいいよね（※1）。
華麗にスルーして結構です。今回は堅苦しくないふれんどり〜な文体でいきたい
と思います。てなわけで、恒例の準備物です。

●必要条件

・Reflector for .NET 
  http://www.aisto.com/roeder/dotnet/
・バイナリえぢた（何でもよい）
　お勧めは、StirlingまたはQuickBe
・私を生暖かい目で見てくれる優しい心

●十分条件

・C#に関しての知識
・プログラミングに関する知識


■0x03.) えーマジ　マネージドコード!!マネージドコードが許されるのは小学生までだよね（※2）

　タイトルに内容はさほど関係はありません。ただ単に、テンションが高かった
のでつけてみました。てへ♪　関係あることとええば、マネージドコードのこと。
e-wordsから説明を引っ張ってくると、次のような解説になっています。

-----  引用
マネージドコード：
Microsoft .NETの標準動作環境である、CLRの管理下で実行されるプログラムコー
ド。C#などの.NET対応言語によって、.NETのプログラミング規約を守って開発さ
れたプログラムがマネージドコードである。CLRが提供するガーベジコレクション
などの機能をフルに利用できるコードである。CLRの管理を受けないプログラムの
ことはアンマネージドコードという。
-----

　マネージドコードの利点はなんぞや？　というと、あらゆるプラットフォーム
で実行できる利点があるから。要するにJavaと同じ。他にも理由はあるけど、大
体これがメインかな？　このマネージドコードにより、Ollyでは解析できません。
でも、中間言語なので、ソースの復元はかなりの復元力ってかほぼ100% Visual 
Studioでコンパイルするときに、最適化されているんで多少は内容変わります。
でも難読化なんかされると、(゜Д゜)マズー。後、なんだか知らないけど私の恋のバ
イナリは、おにゃのこで実行できないらしいです。
　バイナリ　バイナル　バイナロ　バイナラッラ（恋のバイナリ）。


■0x04.) さくらんぼキッス　〜解析だも〜ん〜（※3）

　今回のた〜げっとは次のURLからDLできます。

http://www3.pf-x.net/~right-hand-side/RE/WB/mee_wb.zip

　制作時間3分と言う代物。だって、簡単な方が解説とか解析とかしやすいじゃな
いですの♪　至ってシンプル、ひ○らしの"な"く頃に仕様でございますです♪　
起動して、真ん中のボタンを押してみると「あぼーん」なんてならないので、ど
うぞどうぞお気楽に押してください。押したところで「ほかのメッセジーボック
スを出すのでございますのよ！」との作者の頭の悪さが伺えるような言葉が出て
きますです。書いてあるとおり、ここは分岐処理されていてバイナリを書き換え
ることにより、他のメッセージボックスを出すことができます。このレポートの
目的はこれですよ！！
　「なぜこんな簡単な物を[k]するのか？」と聞かれれば、「そこに.NETがあるか
ら」と答えるしかないじゃあ〜りませんか！！普通にアンマネージドコードだっ
たら、美咲ちゃんを読めば即解決ばいばいきーんになるんですけど、奥さん.NET
ですよ！！.NET！！　どっとねっと　て　響きが（・∀・）イイ。

　そんじゃ早速始めましょ！！
　前回使ったReflectorつかって、さっきDLした「くらっくみ〜☆」を開いてくだ
さいまし。使い方は前回書いてあるのでそれを参照にしてね♪　さいどちゃんか
らのお願いだよ♪　きんもー☆

　気を取り直していきましょ〜。
　読み込んで、クリックした後の処理を追っていくために　button1_Clickのとこ
ろまでたどり着けたかな？

　無事たどり着くと、次のようになります。


-----
private void button1_Click(object sender, EventArgs e)
{
      if (true)
      {
            MessageBox.Show("ほかのメッセジーボックスを出すのでございますのよ！");
      }
      else
      {
            MessageBox.Show("せいかいですわ！");
      }
}


/*メッセージボックスのメッセージは　\u305b\u3044\u304b　みたいに書かれているけど
　読みにくいから、直しちゃいました　てへ☆                                       */
-----

　Reflectorの上の方に、コンボボックス。あえて、言葉で説明するなら「うえか
らび〜〜ってなって選べるやつ」。余談なんですが、私は擬音語・擬声語・擬態
語のマスターなんだそうですよ？
　そこから「IL」ってのを選んでくださいまし。

　以下、C#にかわりまして MSILがお送りします（※4）。


-----
.method private hidebysig instance void button1_Click(object sender, [mscorlib]System.EventArgs e) cil managed
{
      .maxstack 1
      .locals init (
          [0]  bool flag1)
      L_0000: ldc.i4.1 
      L_0001: stloc.0 
      L_0002: ldloc.0 
      L_0003: brfalse.s L_0011
      L_0005: ldstr "ほかのメッセジーボックスを出すのでございますのよ！"
      L_000a: call [System.Windows.Forms]System.Windows.Forms.DialogResult [System.Windows.Forms]System.Windows.Forms.MessageBox::Show(string)
      L_000f: pop 
      L_0010: ret 
      L_0011: ldstr "せいかいですわ"
      L_0016: call [System.Windows.Forms]System.Windows.Forms.DialogResult [System.Windows.Forms]System.Windows.Forms.MessageBox::Show(string)
      L_001b: pop 
      L_001c: ret 
}
-----

　どっかに書いてありましたけど、ILはアセンブラより簡単らしいですよ？
　今回は資料として以下のサイトを参考にさせてもらっています。

http://www.atelier-blue.com/program/il/index.htm
http://d.xenowire.net/mog/
http://dotnet.di.unipi.it/EcmaSpec/PartitionIII/

　では、ひとつずつ見ていきましょうか('A`)マンドクセ。

○PUSHとPOP
　PUSH、POPという言葉が出てくるのでお父さんがんばって補足しちゃうぞ！！
　PUSHとはスタックに数値・文字などを置く操作、POPとはスタックから数値・文
字引き出す操作。当然疑問に思うスタックの説明をするんだが、言葉で説明して
もややこしい。。要するにスタックとは、本を積み上げるような構造のようなこ
となんですね。具体例を示すと次のようになります。

-----
PUSH ゲームラボ         スタックの内容｛ゲームラボ｝
PUSH 広辞苑             スタックの内容｛広辞苑,ゲームラボ｝
POP 　　　　　          スタックの内容｛ゲームラボ｝
PUSH ハッカーの教科書   スタックの内容｛ハッカーの教科書,ゲームラボ｝
POP 　　　　　          スタックの内容｛ゲームラボ｝
POP 　　　　　          スタックの内容｛｝
-----

○.maxstack 1
　maxstackとはその関数で使用されるスタックの最大使用量らしいので、この場
合スタックの最大使用量は1らしい。

○.locals init ( [0] bool flag1)
　.localsはローカル変数の宣言。initというのは自動で初期化してくれる機能ら
しい。bool flag1はローカルなブーリアンを宣言でちゅ。[0]とはローカル変数の
番号らしいです。

※stloc./ldloc.の後に来る数字はローカル変数への番号なのですよ〜（たぶん。

○L_0000: ldc.i4.1
　スタックにin32型の1をpush。バイナリコードは0x17。

○L_0001: stloc.0 
　スタックから、ローカル変数の0番へ値を移動。この場合のローカル変数の0番
とはbool flag1なのですよ。バイナリコードは0x0a。

○L_0002: ldloc.0
　ローカル変数の0番から、スタックへ値をプッシュ。ローカル変数の0番の数字
は1なので1がスタックにpush!push。バイナリコードは0x06。

○L_0003: brfalse.s L_0011
　brfalse.s　L_0011　popした値がfalseならLABELへ移動。0はfalse。バイナリ
コードは0x2c。

○L_0005: ldstr "ほかのメッセジーボックスを出すのでございますのよ！"
　ldstr "文字列"で文字列をスタックにpushする。バイナリコードは0x72。

○L_000a: call [System.Windows.Forms]System.Windows.Forms.DialogResult [System.Windows.Forms]System.Windows.Forms.MessageBox::Show(string)
　関数の呼び出しなのですぅ。バイナリコードは0x28。

○L_000f: pop 
　スタックの先頭の要素を削除するのだ〜。バイナリコードは0x26。

○L_0010: ret 
　retは「return from method 」とのことですので、button1_Clickのところまで
戻されるんだって〜。バイナリコードは0x2a。

○L_0011: ldstr "せいかいですわ！"
　バイナリコードは0x72。

○L_0016: call [System.Windows.Forms]System.Windows.Forms.DialogResult [System.Windows.Forms]System.Windows.Forms.MessageBox::Show(string)
　関数の呼び出しなのですぅ。バイナリコードは0x28。

○L_001b: pop 
　スタックの先頭の要素を削除するのだ〜。バイナリコードは0x26。

○L_001c: ret 
　retは「return from method」とのことですので、button1_Clickのところまで
戻されるんだって〜。バイナリコードは0x2a。

　これじゃあ、非常にわかりづらいのでスタックの変化とどんな流れでいくのか
を書いていきますよ〜。

#1 L_0000:スタックに1をpushする	                		スタック[1]
                      |
#2 L_0001:スタックから、ローカル変数の0番へ値を移動		スタック[ ]  flag1 == 1
                      |
#3 L_0002:ローカル変数の0番から、スタックへ値をプッシュ 	スタック[1]  flag1 == Null?
                      |
#4 L_0003:popした値がfalseならL_0011へ移動。0はfalse。  	スタック[]
          スタックの値が1なので下に移動
                      |
#5 L_0005:スタックに文字列をpush                        	スタック[文字列]
                      |
#6 L_000a:メッセージボックス関数を呼び出して表示
                      |
#7 L_000f:スタックの先頭の要素を削除                    	スタック[]
                      |
#8 L_0010:　　　　おしまい

　わかりましたかご主人様？　わかりやすく説明したおつもりなのですが……。
　well…このレポートの目的である、他のメッセージボックスを表示するために
は分岐を無理矢理ねじ曲げる方法とスタックの数字を変える、2つの方法があるの
ですが、どっちがイイでしょうかね？　どちらかと言うと、新スクより旧スクの
ほうがよい様な気がしますが、参考までにどっちも書いちゃいませう！！


■0x05.) 1-branch ranch（※5）

　ネタがそろそろ尽きてきて、テンションも下がって参りました。タイトルの通
り分岐の書き換えです。方法は簡単「falseがダメならtrueにすればいいじゃない
」（※6）。これにぴったりの命令があるんですね〜。世の中便利になりました。
　brtrue.s targetとは「branch to target if value is non-zero (true), shor
t form」。バイナリコードは0x2D。
　英語って見るとアレルギー起こしませんか？　そうですか…。訳すと「もし0じ
ゃなかったら指定された場所（target）に島流し」。.sはたぶんスタックのこと
だと思われますです。

　次に、バイナリえぢたでファイル開いて、分岐箇所を特定します

-----
L_0000: ldc.i4.1 		バイナリコード--0x17
L_0001: stloc.0 		バイナリコード--0x0a
L_0002: ldloc.0 		バイナリコード--0x06
L_0003: brfalse.s L_0011	バイナリコード--0x2c
-----

　となっている箇所を探すとADDRESS[106C---106F]のところにあります。バイナ
リえぢたの使い方がわからないとかいっている人は('A`)シラネ。最後の2cの箇所を
2dに書き換えてしまうと、あら不思議！！なんと他のメッセージボックスが表示
されます。ぱちぱち。


■0x06.) 魔砲「ファイナルマスタースタック」（※7）

　これも簡単スタックに1をpushするldc.i4.1を0をpushするldc.i4.0にすれば解
決。ldc.i4.1をldc.i4.0（バイナリコードは0x16）にするだけでおわり〜。


■0x07.) 見果てぬネタを掴むさっちんアーム（※8）

　本当にネタばっかですんません…。ココまで読んでいると言うことは、痛々し
いネタ・文章・言動の数々をくぐり抜けてきた猛者でしょう。元々こんなつもり
ではなかったのですが、なんだかそのとき超ハイテンションだったので勢いで書
いてしまいました。まあなんだかんだで、内容はちゃんとした内容になっている
と思います。でも、途中でILの資料を読みあさったりして悩んだりしていたらテ
ンション下がって最後の方は文体がぐだぐだに〜。やっぱり文体を保つためには、
テンションが一定水準になっているときに書いたほうがよいですね〜。内容の話
しになりますけれども今回は、今まで誰も扱わなかったILを扱ってみました。ア
センブラはバリバリできるぜ　ばっちこーい！！って人は多いのですが、IL(゜Д゜)ウマー
ってな人なかなかいないんですよね。書いている最中、日本語での資料の少なさ
に本当に苦労しましたよ…。参考にした2つのサイトにホント助けられました。結
局は英語の資料も参考にしましたけど…。でも何も知らなかったILについて、し
れたことは大きな利益利益♪　IL用のデバッガ出ないのですかね？Ollyライクな
やつ。スタックの内容表示とBPとバイナリ書き換えさえしてくれれば文句はない
です。
　目指せILM@STER！！（※9）


■0x08.) ネタ補足

（※1）AIRの観鈴ちんの名言。
（※2）にったじゅん氏の「マジ童貞!?」の名言。
（※3）カラフルキッス〜12コの胸キュン！〜の主題歌。
（※4）VIPでの名無しの名前。
（※5）Orange Rangeをもじった（branchには分岐の意味がある）。
（※6）マリーアントワネットがほざいた血も涙もないような迷言。
（※7）東方永夜抄で霧雨 魔理沙が使うスペルカード：魔砲「ファイナルマスタ
ースパーク」。
（※8）Melty Blood Act Cadenzaにでてくる弓塚さつきが使う技「見果てぬユメ
を掴むさっちんアーム」さっちんかわいいです。
（※9）IDOLM@STERをもじった。

　他にもネタが書いてあります。

