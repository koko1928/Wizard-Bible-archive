x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x

--- 第1章: パッカーの仕組みと構造 ---

著者：suma

x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x


■0x01.) はじめに

　最初はなるべく初心者向けの説明にし、中盤以降はより細かいパッカーの特徴
・欠点などを解説したいと思います。「パッキング」「パック」という単語につ
いて、すべて「パック」に統一しました。


■0x02.) パッカーと布団のイメージ

　ターゲットとなる実行ファイルを布団、パッカーが掃除機・布団・ビニール袋
・ロボットを持った人と考えてください。パッカーは次の作業をします。布団を
ビニール袋に入れ、掃除機で空気を抜いて真空状態にします。これがパックです。
布団はビニールに包まれ、つぶされて小さくなっています。まさにパックされた
（包まれた）状態です。

　布団を使いたくなったらどうするのでしょうか？　ロボットにビニール袋のつ
ぶれた布団を元の状態に戻してもらいます。実はこのロボット、包まれた布団と
一緒にくっつけられています。布団を元に戻す作業がアンパック、布団を元に戻
してくれるロボットのことをローダーといいます。

・ターゲットの実行ファイル：布団
・パッカー：掃除機、ビニール袋、ロボットを持つ人
・ローダー：布団を元に戻してくれるロボット
・パックされた実行ファイル：ビニールに包まれてつぶれた布団とローダー

　つぶれた布団は小さくなるので収納に便利です。これと同じことが実行ファイ
ルのパックにもいえます。圧縮すれば実行ファイルは小さくなります。ハードデ
ィスク容量の節約・インターネットなどの媒体を利用して配布する際にファイル
サイズが小さいと都合がよいかもしれません。しかし、現在のハードディスクの
大容量化や通信速度から考えて気にするものではないでしょう。これは十分な場
所があるにもかかわらず、無理に布団をつぶしていることとかわりません。

　実行ファイルのサイズが小さくなることの効果は他にもあります。ハードディ
スクなどから実行ファイルを読み込む時間が短くなります。ファイルの読み込み
とアンパックにかかる時間が元の実行ファイルの起動時間より早ければそのぶん
起動が早くなります。人間が大きな布団を取り出すより、つぶれた布団をロボッ
トが人間より素早く運び、取り出したほうがかかる時間は短い、というイメージ
です。当然ながら、アンパックにかかる時間の方が多くて逆にプログラムが起動
する時間が増えてしまうことも考えられます。

　また、実行ファイルのサイズが減っても、実行時にメモリ使用量が減るわけで
はありません。つぶれた布団が元の大きさに戻れば、布団を利用するための相応
の広さが必要になります。布団に加え、ビニール袋・ロボットのぶんだけ必要と
する場所は増えることになるでしょう。


■0x03.) アンパッカーとマニュアルアンパック

　アンパッカーはパックされた実行ファイルから元の実行ファイルを復元するプ
ログラムです。例えばUPXはオプションに「-d」を指定することでアンパックが可
能です。UPXはパッカーでもありますがアンパッカーでもあります。

　アンパッカーを使わず、デバッガやダンプツールを使って手動でアンパックす
ることをマニュアルアンパックをといいます。アンパック用のダンプツールとし
て、Windows用デバッガOllyDbgプラグインのOllyDumpなどがあります。

　アンパッカーがあればマニュアルアンパックをする必要はありません。しかし、
いつもアンパッカーが手に入るとも限りません。マイナーなパッカーにが対応す
るアンパッカーがないかもしれません。また、アンパッカーを作るのは多くの労
力が必要です。ローダーの仕組みを調べ、それとほぼ同じプログラムを作成しな
くてはなりません。そこで、「アンパック」までの処理をローダーに任せ、復元
後のメモリをダンプして横取りする方法を取ります。こちらの方がはるかに労力
が少なくなります。


■0x04.) Generic Unpacker

　アンパックはローダに任せてしまう。これが最も簡単方法（アンパッカーは労
力がかかるという面で除外）ですが、すべての状況でこれが実行可能とは限りま
せん。後述するプロテクターにはダンプを防ぐ機能を実装しているはずです。メ
モリのダンプの方法ですが、デバッガでトレースしてからダンプする、あるいは、
プログラムを実行してからダンプするという流れになります。

　Windows用の逆アセンブラのdispeのを例にあげて説明します。この逆アセンブ
ラは「-d」オプションを指定することで、パックされた実行ファイルを自動でア
ンパックしてから逆アセンブルします。dispe本体のコードまで解析したわけなの
で確実にこの方法を取っているとはいえません。しかし、このアンパックの考え
方は次のようになっていると考えられます。「ローダーの処理が終わるまでプロ
グラムを実行させ、元のコードに実行が移る前に逆アセンブルを実行する」

　このような方法によるアンパッカーは海外ではGeneric Unpackerといわれてい
るようです。この方法の欠点は、実際にコードを実行しているということです。
実行されるコードはツール任せであり、危険性がないとも限りません。コードが
実行できるという点から柔軟性があるともいえますが、コードを実行してしまう
から柔軟性に欠けるという見方があるかもしれません。自動化のひとつの手段と
して知っておいて損はないでしょう。


■0x05.) 完全な元の実行ファイルの復元

　アンパッカーを使う、あるいはマニュアルアンパックによって完全な元の実行
ファイルは復元可能でしょうか？　これはできないと考えてほぼ間違いありませ
ん。なぜなら、パッカーによってはパックの際にプログラムの実行に必要ないデ
ータを削除するもの、不可逆な処理をするパッカーも存在するためです。

　非常に簡単な例をあげましょう。Windows実行ファイルのPEファイルにはセクシ
ョンという単位でデータを区切っています。また、そのセクションには名前が付
けることができますが、名前そのものは実行に何も影響を与えません。パックに
「セクション名を変更する」という処理が含まれただけで、完全に元に戻せない
ものとなってしまいます。

　パッカーが何も削除することなく、パッカーの処理が完全にわかっている場合
はどうでしょうか。完全な元の実行ファイルが復元できそうに思えます。この条
件であれば私も可能だと思います。しかし、次の条件が暗黙についてまわるでし
ょう。「パックされた実行ファイル」しか手に入れられない場合です。そもそも
元の実行ファイルがないからアンパックという手段にでるのですが、元の実行フ
ァイルがないので比較・検証する手段はありません。いってみれば、「完全に復
元しましたが、それを確かめる手段はありません」ということです。


■0x06.) プロテクターとしての役割

　プロテクターとは、リバースコードエンジニアリングを防ぐ（妨害する）ため
に作られるパッカーです。パックされたコード・データは外部から直接参照する
ことができません。そのため逆アセンブルしてもパックされる前のコードを逆ア
センブルできなくなります。また、前述したダンプの対策や、デバッガのトレー
スの妨害もプロテクターの役割となります。パックには圧縮アルゴリズムだけで
なく、多重にコードが暗号化されることもあります。


■0x07.) 暗号化

　「暗号化する」といっても、結局は実行時にローダーのアンパックの処理の中
で復号化されます。そうでなければ元のプログラムを実行することができません。
暗号化したデータを復号化するためのコードがローダーに含まれて実行されるた
め、人間が読み解いていくことは困難であっても不可能ではありません。

　ここでいう暗号化は共通鍵暗号（秘密鍵暗号）のことを指します。暗号化した
データを復号化するには、暗号化に使った鍵でのみ復号化できます。プロテクタ
ーの内部で共通鍵暗号が使われるということは、その鍵もプログラム中に含まれ
ています（※1）。

　そのため、暗号アルゴリズムの強度は低くてもかまわないでしょう。鍵が埋め
込まれているのですから、アルゴリズムよりも鍵を隠すほうが大事といえます。
また、暗号化が多重に施してあった場合を考えてみてください。アンパックする
ための手間が増えていきますね。

（※1）鍵をプログラム内に含まないで実装することも可能です。しかし、実行フ
ァイル中に埋め込まれていなくても、結局は復号化の際に鍵が使用されるため、
その鍵を見つけてしまえば復号化が可能です。


■0x08.) ダンプに弱い

　何重にパックされていても、前述したダンプにはとても脆弱です。暗号といっ
ても、アンパックされるまでのデータを保護するだけです。


■0x09.) アンチデバッガ・アンチダンプ

　デバッガによるトレース、ダンプの対策が「アンチデバッガ」と「アンチダン
プ」です。アンチデバッガはデバッガを検出してプログラムを強制終了します。
アンチダンプはローダーの元のコードのアンパック後、ダンプしても実行できな
いようにアンパックされたメモリを改変したりします。


■0x0A.) おわりに

　パッカーについてまとまった文書がなかったので挑戦してみました。Windows向
けのパッカーが多いこと、私がWindowsだけでしかパッカーを使用した経験がない
ため、例としていくつかWindows向けのツールを紹介することにしました。抽象的
でわかりにくくなってしまったかもしれませんが、パッカーについてより理解が
深まれば幸いに思います。

