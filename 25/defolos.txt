x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x

--- 第○章: HTMLで作るWEBサイト  〜 第1回 〜  ---

著者：Defolos

x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x


■0x01.) はじめに

　こんにちは、Defolosです。今回はHTML（Hyper Text Markup Language）につい
て執筆いたします。
　HTMLはご存じの方も多いと思いますが、Webサイト（俗にいうホームページ）を
構成するもっともメジャーなマークアップランゲージです。HTML以外にもXMLやXH
TMLなどのマークアップランゲージも存在しますが、今回はHTMLのバージョン4.01
についてのみ言及いたします。

　よくハッカーの必須スキルのひとつとして取り上げられるHTMLですが、これほ
ど誤用が多く軽んじられる技術は少ないと思います。そのようなわけで、このレ
ポートでは正しいHTMLの用法に重点を置き、その簡単な歴史、基礎概念、実際の
コーディングからWEBサイトを作り上げる方法をまとめたいと思います。


■0x02.) HTMLの簡単な歴史

　HTMLは1989年3月にSGML（Standard Generalsed Markup Language - ISO8879:1
986）をベースとしてTim Berners-Leeが発案したマークアップランゲージで、後
の1994年にHTMLの仕様を策定するW3Cが発足しています。この章ではHTML発案以前
のWWW（World Wide Web）に関する歴史でHTMLに大きく関係するものを取り上げま
す。

●Memex

　ハイパーテキストの概念の大元となった概念は1945年にVannevar Bushが発表し
た「我々が考えるように」というタイトルの論文に出てくるMemexです。Memexは
1945年、アメリカ軍の原子爆弾開発計画「マンハッタン計画」の指揮を勤めるVa
nnevar Bushが考案したシステムで、大量の資料をいつでも簡単に取り出せるよう
にするシステムを目的として、関連した情報を容易に閲覧でき、容易に新たな情
報を加えることができるシステムでした。資料を撮影するためのカメラと、撮影
したフィルムを保存しておくマイクロフィルム、それとマイクロフィルムを投影
するスクリーンを持った機械だったようです。
　彼が初めてハイパーテキストシステムについての論説を発表したのですが、「
ハイパーテキスト」という名前を初めて使ったのは後述するTed Nelsonです。こ
のように彼の思想は先駆的であり、Vannevar Bushの発表した概念が現在私達が利
用しているWWWの下地になっています。

●Xanadu

　XanaduはTed Nelsonが発表したグローバルハイパーテキストシステムの概念で、
現在のWWWがこの概念にもっとも近いシステムとされています。WWWの歴史を語る
上でなくてはならない概念であり、現在のWWWはXanaduのサブセットとしてその機
能の一部を実現するものです。
　Ted Nelsonは1965年にACM（Association for Computin Machinery）に提出した
論文で、初めて「HyperText」（ハイパーテキスト）という言葉を発表しました。
Ted Nelsonは後に、この考え方をSamuel Taylor Coleridge著作の小説に登場する
架空都市から名前をとり、Xanaduと名付けました。このXanaduの概念は非常に巨
大なもので、現在でもこの機能のすべてを満たすシステムは発表されていません。
Xanaduの概念の一部を大雑把に列挙すると次のようなものがあります。

・情報のリンク
・情報の半永久的保存および文書のバージョン化
・引用窓による著作権問題の解決
・電子出版
・ネットワーク利用による分散処理

　詳細はここでは愛割させていただきますが、リンク、電子出版、ネットワーク
の利用という部分は現在のWWWでも実現されている部分です。
　Xanaduはあまりにも巨大な概念であったため、近年ではサブセットであるWWWに
足りない部分を補う形で実現が検討されているようです。彼の発表したXanaduも
また後の技術に大きな影響を与えました。

●WWW

　WWWは1989年にジュネーブ郊外にあるCERN（Conseil europeen pour la Recher
che Nucleaire：ヨーロッパ素粒子物理学研究所）に勤めていたTim Berners-Lee
とRobert Caillauによって発案されました。
　Tim Berners-LeeはCERNにある異なったコンピュータのどれからでも情報にアク
セスできるようなリンクされた情報データベース共有システムで、ダム端末（※1
）からグラフィカルなX Windowワークステーションまで幅広い種類の端末で文書
を共有できるように設計されたシステム、WWWを考案しました。当時、SGMLを使う
人は何人かいたようですが、多くの人はTeXやPostScriptを使って文書を作成して
いました。文書データベースの利用にハイパーテキストを使用するという考えが
考案され、非常に習得が困難だったSGMLの一部の機能として独立させることで簡
単にし、SGMLのサブセットとしてHTMLが考案されました。ちなみにWWWは正確に言
いますとTed Nelsonの提唱したハイパーテキストとは似て非なるものではありま
す。
　このようにHTMLは環境に依存せずに情報を共有するために発案され、そのHTML
を送信するためのプロトコルとしてHTTP（Hyper Text Transfer Protocol）が作
られました。

●注釈

（※1）ダム端末（dumb terminal）
　ホストコンピュータが表示する文字列を、単純にスクロールさせながら表示す
る端末。カーソル移動などの画面制御が可能な端末（こちらはインテリジェント
端末などと呼ばれる）と対比して用いられることが多い。

・「@nifty：デジタル用語辞典：ダム端末」を引用。
http://www.nifty.com/webapp/digitalword/word/010/01015.htm


■0x03.) HTMLの特徴

　HTMLはSGMLのサブセットとして定義されました。SGMLで定義されたマークアッ
プランゲージはSGMLアプリケーションと呼ばれ、HTMLもSGMLアプリケーションの
ひとつだということになります。SGML文書にはSGML Declarationと後述するDTDお
よびDocument Instanceが含まれます。

・SGML Declaration：SGMLアプリケーションにどのような文字や区切り子が出て
くるかを定義する
・Document Type Definition：文字参照を含むマークアップの文法を定義する
・Document Instance：マークアップされた文書の本文

　HTMLはSGML DeclarationとDocument Type Definitionは用意されていますので、
文書の本文をマークアップするだけで文書を作ることができます。

　HTMLは文章構造を論理的にマークアップ（意味付け）するための言語で、その
文章が見出しなのか段落なのか強調なのかといった構造・意味を定義します。つ
まり、HTMLは文字の大きさや色などのWebサイトの見栄えをデザインするための言
語ではないということです。このことをまず念頭に置いてください。

　しかし、Internet ExprolerなどのブラウザでWebサイトを閲覧すると様々な大
きさの文字やカラフルな文字が使われていたり、背景に色が付いていたりします。
このように見た目もしっかり変わっているのにどうしてHTMLで見栄えをデザイン
してはいけないのかと疑問に思う方も多いと思います。なぜHTMLで見栄えのデザ
インをしてはいけない（むしろ見栄えをデザインできない）かと申しますと、環
境に依存しないためです。例えば、ブラウザはInternet ExprolerやNetscape Na
vigatorのようなグラフィカルなブラウザだけではありません。ブラウザによって
は1色のひとつの大きさの文字しか表示できないブラウザや音声で読み上げるだけ
のブラウザ、さらにHTMLを解釈するプログラムには検索エンジンのクローワやプ
ロクシなども含まれます。こういったHTMLを扱うものの総称をユーザエージェン
トと呼びます。私の考えではHTMLを解釈するという点で人間もただのユーザだけ
でなくユーザーエージェントにも分類されるのではないかと考えております。
　正しく作られたWebサイトはすべてのユーザーエージェントに正しく解釈されま
す。例えば見出しは、それとわかるように大きな文字で表示されたり、中央に表
示されたり、見出しだけ男性の声で読み上げられたりします。もしここで、Inte
rnet Exprolerだと見出しが大きく表示されるからといって文字を大きくするため
に見出しを使ってしまうと他のユーザーエージェントでは解釈できなくなってし
まいます。また、「文字を大きくする」といった物理的な見栄えしか意味を持た
ないようなものは、音声で読み上げることしかできなかったり、ひとつの大きさ
の文字しか表示できないようなユーザーエージェントでは解釈できません。
　様々な環境、即ち様々なユーザーエージェントでHTMLにアクセスしているユー
ザーがいるということを忘れないようにしてください。

　上記で、HTMLで見栄えをデザインするべきではないと言ってきましたが、やは
りデザイン性というものはそう簡単に捨て去ることができるものではありません。
そこでHTMLにはデザインを指定するCSS（Cascading Style Sheet）というものが
策定されています。デザインにこだわりたい方はCSSを使ってHTMLの見栄えをデザ
インすることができます。このCSSの目的は見栄えと文章構造を分離することにあ
ります。CSSはユーザーエージェントが表示する見栄えを統一するための技術では
ないため、CSSでの見栄えもそれぞれのユーザーエージェントに依存することにな
ります。これはHTMLの本質的なものであり、巷でよく見られるようにそれぞれの
ブラウザで見た目を統一するといったことは本来のHTMLの思想概念から外れてい
るように思われます。

　HTMLの仕様は、現在ではW3C（World Wide Web Consortium）という非営利団体
が策定しています。ブラウザの開発ベンダーなどが独自拡張した仕様も存在しま
すが、基本的にそれらの独自拡張は使用せずにW3Cの策定した仕様に従ってHTMLを
記述するべきです。W3Cの策定した仕様は設計段階からアクセシビリティ、ユーザ
ーシビリティ、後方互換などが深く検討されており、W3Cの仕様に従うだけで非常
に優秀なHTML文書を作ることができます。もしどうしてもW3Cの仕様に従えない理
由がある場合はW3Cの仕様書はあくまで勧告（今のところ標準ではありませんが、
現在さらに厳格な文法で標準とする動きもあるようです）ですので無理に従う必
要性はないと思いますが、できる限りW3Cの仕様に従うべきだというのが私の考え
です。


■0x04.) URIについて

　WWWの思想のひとつには情報のリンクというものがあります。HTMLではリンクな
どでリソースの場所を指し示すのにURI（Uniform Resource Identifier）を利用
します。URIには聞き馴れないものがあるかもしれませんが、URL（Uniform Reso
urce Locator）というのは皆様ご存じではないかと思います。URLはURIのサブセ
ットですが、URLとURIを置き換えて解釈してもそう間違えはありません。URIは次
のように記述されます。

http://ruffnex.oc.to/defolos/

●URIの構成

　URIの構成はいくつかの部分に分けられます。

○http

　一番左に記述されるhttpなどの部分は「スキーム」（Scheme）です。日本語で
は「命令概念」と訳すことができ、そのリソースにアクセスするために用いるメ
カニズムの概念の名前です。
　よくプロトコルと間違われることがありますが、スキーム名とプロトコル名と
は必ずしも一致するわけではありません。例えばmailtoというスキーム名があり
ますが、この場合「メールを送信する」という命令の概念を表すにすぎません。
実際にこの命令を実行するのはSMTPなどのプロトコルです。httpの場合スキーム
名とプロトコル名は一致しますが、多くの場合は一致しません。

○:

　おそらく「:」が区切りとして用いられます。RFCのスキームリストには「:」を
スキームに含めていなかったのですが、W3CのNoteでは「:」もスキームに含める
例があり、非常に混乱する部分です。ですのでこの部分は不確かな情報として取
り扱いください。

○//

　「//」がついているのはリソースがネットワーク上にあることを表します。ロ
ーカル内のリソースの場合ホスト名は省略されるため、「///」になります。

○ruffnex.oc.to

　ホスト名です。リソースが存在するサーバに割り振られているドメインネーム
です。

○/defolos/

　サーバーの中のdefolosというディレクトリのファイルを指定します。ファイル
名は省略することができ、その場合サーバで決められたファイル（多くの場合in
dex.htmlやhome.html）やディレクトリにあるファイルリスト、エラーコードなど
が返されます。ここで注意していただきたいのは、ファイル名は省略できますが、
ディレクトリは省略できないということです。つまり「/」を省略することはでき
ませんが、多くのブラウザではブラウザ側で「/」を補ってくれるようです。

●フラグメントURI

　その文書内のある一部分を指し示すURIをフラグメントURIといい、次のように
記述されます。

http://ruffnex.oc.to/defolos/test.html#section3

　これはtest.thml内にある、nameやidアトリビュートでsection3という名前が付
けられた部分を指し示すことになります。

●フルURIと相対URI

　フルURIとは前述の例のようにスキーム名からファイル名（ファイル名は省略可
能）までをすべて記述する方式です。相対URIはその文書から見たリソースの位置
です。これはUNIXなどのディレクトリ移動などを考えてもらえるとわかりやすい
と思います。例えば次のアスキーアートをご覧ください。

+==[defolos]================================================+
|                                                           |
| +----------+ +----------+ +---------+ +-----------+       |
| |index.html| |about.html| |hack.html| |source.html|       |
| +----------+ +----------+ +---------+ +-----------+       |
|                                                           |
| +==[figure]=============+ +==[source]===================+ |
| | +------+ +---------+  | | +----------+ +------------+ | |
| | |bg.jpg| |banna.jpg|  | | |hello.html| |tab_ins.html| | |
| | +------+ +---------+  | | +----------+ +------------+ | |
| +=======================+ +=============================+ |
|                                                           |
+===========================================================+

　defolosディレクトリ内にindex.html、about.html、hack.html、source.htmlと
いう4つのHTMLファイルとfigure、sourceという2つのディレクトリがあることを
表しています。この場合index.htmlからabout.htmlを相対URIで指し示すには「.
/about.html」と記述します。index.htmlからhello.htmlを指し示すには「./sou
rce/hello.html」のように記述します。もしhello.htmlからindex.htmlを指し示
すには「../index.html」のように記述します。「.」はカレントディレクトリを
表し、「..」は1階層下のディレクトリを表します。
　今後の解説では、このディレクトリ構造を用いて解説を行います。


■0x05.) はじめてのHTML

　それでは、はじめてのHTMLを書いて見ましょう。サンプルとしてハッキング技
術周辺を紹介するようなサイトを想定してWebサイトを実際に書きながら解説を進
めていきたいと思います。サイト名は「ハッキングラボラトリ」にしましょう(*'ω')

-----
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
 "http://www.w3.org/TR/html4/strict.dtd">
<html lang="ja">
<head><title>ハッキングラボラトリ - トップページ</title></head>
<body>
<p>これは私のはじめてのWEBサイトです。</p>
</body>
</html>
-----

　ソース中の改行はHTMLでは無視されますので、改行してもブラウザでの表示に
は影響しません。多くの場合ブラウザは適切な位置で自動的に改行しますが、単
語の途中などでは出来る限り改行せず、「。」の後ろなどで改行するようにした
方が無難です。
　HTMLは「タグ」を用いて文章構造を定義します。タグは<html>のような開始タ
グと</html>のような終了タグを総称して「タグ」と呼びます。<と>に囲まれたh
tmlのような文字を「エレメント」（要素）と呼び、langなどの要素の後に続くも
のを「アトリビュート」（属性）と呼び、この例では言語を指定しています。ま
た、lang="ja"のjaのようなものを「バリュー」（値）と呼び、この例では日本語
を表しています。開始タグと終了タグの間に挟まれた部分を「コンテント」（内
容）と呼びます。タグの中には終了タグを省略できるものや、終了タグを書いて
はならないものもあります。
　ちなみに、エレメント名やアトリビュート名は大文字、小文字で識別はされま
せん。このレポート内では見やすさのため、すべて小文字で書いてあります。HT
MLの仕様書の中ではエレメント名は大文字で、アトリビュート名は小文字で記述
されていますが、これに習う必要性はありません。
　また、バリューは"（ダブルクォーテーション）で囲むようにしてください。バ
リューに使用できるものは""で囲まれた文字列かname tokenだけです。name tok
enは英数字と「.」、「-」、「:」、「_」で構成された文字列で、よくわからな
いならすべて""で囲んだほうが無難です。
　HTML文書は大まかにわけて、次の3つの部分に分けられます。

●DOCTYPE宣言

　DOCTYPE宣言（文書型宣言）はそのHTML文書がどのDTD（Document Type Defini
tion：文章型定義書）にのっとって書かれたものなのかを明示します。前述の例
では<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org
/TR/html4/strict.dtd">の部分で、空白文字と注釈宣言、処理命令を除いてHTML
文書の最初に記述します。これはHTMLにおいては必須で、DOCTYPE宣言を省略する
ことはできません。

○DOCTYPE宣言の詳細

　HTMLにもバージョンがあり、バージョンによって使えるエレメントやアトリビ
ュート、キャラクタセットなどが異なります。こういった情報はすべてDTDに明記
されています。つまりDOCTYPE宣言はHTML文書がどのバージョンやDTDに沿って書
かれたものなのかをユーザエージェントに知らせる役割を持ちます。DOCTYPE宣言
もいくつかの部分に分けることができます。

・<!
　マーク宣言開始区切り子です。DOCTYPE宣言はマーク宣言であり、ここからマー
ク宣言が始まるということを示すものです。マーク宣言の中にはコメントなども
含まれます。

・DOCTYPE
　マーク宣言の宣言の種類を表します。DOCTYPEは文書型宣言であることを表して
います。スペースなどを入れることは許されていませんので、ぴったりくっ付け
て記述するようにしてください。

・HTML
　文書型名であり、ルートエレメントを指し示します。ここでHTMLを指定してい
るのでHTML文書は全体がhtmlエレメントで囲まれています。正確にはhtmlエレメ
ントも省略可能ですが、省略するべきではありません。

・PUBLIC
　外部識別子です。外部に公開されている文書を参照して、PUBLICと書かれてい
る場所に参照した外部文書をそのままコピーすることを表しています。この部分
に文書中で利用するDTDをそのまま書いてもいいのですが、あまりにも長くなるた
め外部ファイルを参照するようになっています。

・"-//W3C//DTD HTML 4.01//EN"
　公開識別子です。HTMLの場合はSGML宣言で「FORMAL YES」と宣言されています
ので「公的公開識別子」になります。公的公開識別子は「所有者識別子」（-//W
3C） 、「区切り子」（//） 、「文識別子」（DTD HTML 4.0//EN）のように記述
されます。所有者識別子は外部文書の所有者を表します。上記の例では所有者は
W3Cということになります。また、「-//」ではじまる所有者識別子は未登録所有
者識別しになり、その文書の正式登録された所有者がいないことを意味していま
す。正式登録された所有者がいる場合は「+//」になります。次の文識別子の構成
は「公開文種別」（DTD）、「公開文記述」（HTML 4.0）、「区切り子」（//）、
「公開文言語」（EN）となります。公開文言語は参照するDTDの言語です。正式な
DTDは英語版しかありませんから、ここは常にENになります。これらはすべて大文
字で記述します。

・"http://www.w3.org/TR/html4/strict.dtd"
　システム識別子です。DTDのURIを記述します。これは公開識別子を補足するも
のであり、公開識別子のみでDTDを識別できるなら省略できます。システム識別子
はHTMLの場合、書いても書かなくても問題はありませんが、ユーザーエージェン
トの中にはシステム識別子の有無で表示形式を変えるものもあります。

・>
　マーク宣言終了区切り子です。これによりマーク宣言が終わりであることを表
します。

○HTML4.0で参照されるDTD

　このレポートを執筆している2006年2月20日現在で最新バージョンのHTML4.0に
は、さらに3つの規格があり、それぞれ参照するDTDなどに違いがあります。

・Strict
　通常HTML4.0といえばこの規格をさします。厳格な決まりがあり、非推奨のエレ
メントやアトリビュート、バリューなどを一切使わないだけでなく、それぞれの
エレメントの配置位置なども厳格に規定されています。また、Strictはフレーム
内に出現することはできません。Strictの場合のDOCTYPE宣言は次のようになりま
す。

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
 "http://www.w3.org/TR/html4/strict.dtd">

・Transitional
　Strictよりもルーズな規格です。非推奨のエレメントやアトリビュートの使用
ができますが、framesetエレメントを使用することはできません。Transitional
の場合のDOCTYPE宣言は次のようになります。

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

・Frameset
　Trasitioalで規定されたエレメントやアトリビュートおよびframesetエレメン
トを使用することができます。フレームでWEBサイトを構成する場合に使用します。
Framesetの場合のDOCTYPE宣言は次のようになります。

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN"
 "http://www.w3.org/TR/html4/frameset.dtd">

●ヘッド部分

　ヘッド部分はHTMLではheadタグによって分けられます（<head>〜</head>の部分）。
ヘッド部分にはそのHTML文書のタイトルやメタ情報（文書の中身以外の情報）、
スタイルシートやスクリプトなどを記述します。この中でtitleタグは省略するこ
とができません。titleエレメントはそのHTML文書の概要を簡単に述べるためのも
ので、ブラウザの上部に表示されたり、お気に入りの名前になったりします。厳
密にはheadエレメントは省略可能ですが、通常省略するべきではありません。
　また、ヘッド部分のメタ情報はmetaエレメントで指定することができます。me
taエレメントは文書のプロパティ（著者、キーワードなど）を設定したり、それ
らのプロパティのバリューを設定するのに用いることができます。例えばメタ情
報は次のように記述されます。

-----
<meta name="Author" content="Defolos">
-----

　これは著者がDefolosであることを表すメタ情報です。nameのバリューはプロパ
ティ名となります。contentのバリューはプロパティに設定される値となります。
プロパティやそのバリューは自分で定義することもでき、その場合プロパティと
プロパティに設定されたバリューがどういった意味と関連付けられているのかは
headエレメントのplofileアトリビュートで指定されたリファレンス（URIで指定）
に記載されることになります。metaエレメントは必ずプロパティとバリューのペ
アで用いられ、nameやhttp-equivアトリビュートでプロパティを指定し、conten
tアトリビュートでバリューを指定します。

　meteエレメントのアトリビュートは次のものがあります。

・name
　プロパティ名を識別するものとなります。name="keywords"でそのWebサイトに
含まれるキーワードを表したり、name="description"でWebサイトの簡単な説明を
表したりできます。

・contet
　プロパティのバリューとなり、プロパティに設定される値を指定します。

・scheme
　プロパティのバリューを翻訳するために利用するスキームの名前を指定します。
メタ情報の翻訳上の文脈をより多くユーザエージェントに提供します。例えば日
付データに「10-12-05」というフォーマットで情報を設定した場合、これは「20
05年10月12日」を表すものなのか「2010年12月5日」を表すのか不鮮明です。そこ
でscheme="Month-Day-Year"を指定することで「2005年10月12日」を表すものだと
いうことをユーザエージェントに明示することができます。
　次の例はcontentがISBNだということをschemeを使って明示した例です。

-----
<meta scheme="ISBN" name="identifire" content="4-88718-862-5">
-----

　schemeアトリビュートのバリューはnameで指定されたプロパティやprofileでプ
ロパティに関連付けられた意味に依存します。

・http-equiv
　nameアトリビュートの代わりに用いられます。HTTPサーバーはHTTPレスポンス
のメッセージヘッダーの情報源としてこのアトリビュートを参照します。例えば
次のようなメタ情報をご覧ください。

-----
<meta http-equiv="Content-Type" content="text/html; charset=SHIFT_JIS">
-----

　このメタ情報の場合、HTTPレスポンスのメッセージヘッダー中のエンティティ
ヘッダーに「Content-Type: text/html: charset=SHIFT_JIS」というヘッダーが
付加されることになります。HTTPのヘッダーについてはRFCなどを参照してくださ
い。

　metaエレメントは開始タグは必須で、終了タグを書くことは禁止されています。

●本文

　本文はHTMLではbodyタグによって分けられます（<body>〜</body>の部分）。本
文にはそのHTML文書の本文を記述します。前述の例では<p>これは私のはじめての
Webサイトです。</p>の部分が本文ということになります。このHTML文書は「これ
は私のはじめてのWebサイトです。」という内容が段落を表すpエレメントでマー
クアップされており、ひとつの段落からなる文書であることがわかります。body
エレメントも厳密に言えば省略は可能ですが、省略するべきではありません。


■0x06.) エレメント

　エレメントはタグがどのような意味を持つものかを定義します。エレメントは
ブロックレベルエレメントとインライン（テキストレベル）エレメントに大別さ
れます。

●ブロックレベルとインライン

　通常ブロックレベルエレメントのコンテントはインラインエレメントと他のブ
ロックレベルエレメントになります。また、通常インラインエレメントのコンテ
ントはデータか他のインラインエレメントのみになります。これはブロックレベ
ルエレメントはインラインエレメントよりも「大きな」構造を創り出すという構
造上の特徴によるものです。例えば、段落を表すpエレメントはブロックレベルエ
レメントで、強調を表すemエレメントはインラインエレメントですので次のよう
な記述は文法エラーとなります。

-----
<em><p>強調です</p><em>
-----

　ブロックレベルエレメントはインラインエレメントと比べて特異性があります。
通常ブロックレベルエレメントは独立した行に配置されます。インラインエレメ
ントは通常その前後で改行されたりせず、その続きに他のデータが続きます。
　ブロックレベルエレメントは見出しや段落などの他のデータと独立させる必要
性のあるものであり、インラインエレメントは強調やリンクなどの文章中の装飾
のようなものです。次の例を見て見ましょう。

-----
<h1>あいさつ</h1>
<p>
ようこそいらっしゃいました。これは私の<em>はじめての</em>WEBサイトです。
まず始めに<a herf="about.html">このサイトについて</a>をお読みください。
</p>
-----

　h1エレメントは最も重要な見出しを表すブロックレベルエレメントで、emエレ
メントとリンクを表すaエレメントはインラインエレメントです。h1エレメントは
ブロックレベルエレメントですので独立した行に配置され、pエレメントもブロッ
クレベルエレメントですので複数行にまたがりますが独立した行に配置されます。
一方emエレメントやaエレメントなどはインラインエレメントですので前後で改行
などは行われません。

●汎用エレメント

　HTMLでは汎用エレメントはdivとspanがあります。divはブロックレベルエレメ
ントの汎用エレメントで、spanはインラインエレメントの汎用エレメントです。
ちなみにdivはDivisionの略で、区切りのことです。
　汎用エレメントとは特に意味を持たないエレメントです。これまで出てきたエ
レメントはタイトルや強調を表すエレメントなど、なんらかの意味を持っていま
した。しかし汎用エレメントはそういった意味を持ちません。では汎用エレメン
トは何のために存在しているのでしょうか。
　これらの汎用エレメントは後述するidアトリビュートやclassアトリビュートを
一緒に用いることで意味をなします。例えばHTMLには「電話番号」を表すエレメ
ントは存在しませんが、spanエレメントにclass(id)を設定することで「電話番号」
を表すことができます。また、同じように「警告」を表すようなエレメントは存
在しません（強調を表すエレメントは存在します）が、divエレメントを用いるこ
とで「警告」を表すことができます。次の例をご覧ください。

-----
<p>電話番号：<span class="tel">0120-00-0000</span></p>
<div class="worning">
この電話番号は架空のものです。
いたずら電話しないようにしましょう。
</div>
-----

　このようにclassアトリビュートを用いることでdivやspanがどういった意味を
持つのかということを明示することができます。さらにスタイルシートを用いる
場合、classがworningであるエレメントのコンテントの文字を赤色にするなどの
管理も容易になります。また、次のように言語を指定する場合に利用することも
できます。

-----
<p lang="ja">
ケヴィン=ミトニックはエフ・ビー・アイをクラックして
<span lang="en">end up in prison</span>になった。
</p>
-----

　少々むちゃのある例でしたが、このように日本語として指定したの段落の中に
英語が入ってくるような場合に「end up in prison」の部分が英語であることを
明示するのにspanエレメントを用いて言語指定をすることができます。
　divエレメントは開始タグ、終了タグともに必須で、コンテントはブロックレベ
ルエレメントとインラインになります。spanエレメントも開始タグ、終了タグと
もに必須で、コンテントはインラインです。


■0x07.) アトリビュート

　アトリビュートとは前述のように属性と訳せ、<html lang="ja">のlang="ja"の
ような部分です。そのエレメントの付加情報のようなものです。エレメントによ
って書くことのできるアトリビュートは決まっており、エレメントによっては必
ず書かなければならないアトリビュートもあります。これらはDTDに明記されてい
ます。
　アトリビュートの中には、ほぼすべてのエレメントに書くことができる共通ア
トリビュートと呼ばれるものも存在しています。

　lang、dir、style、title、id、classアトリビュートなどは非常に多くのエレ
メントに共通して指定することができるため、共通アトリビュートと呼ばれてい
ます。共通アトリビュートの種類はインターナショナリゼーション、コアアトリ
ビュート、イベントアトリビュートの3種類に分かれます。

●インターナショナリゼーション

　インターナショナリゼーションは国際化のことで、internationalizationと綴
ります。あまりに長いのでi18n（iとnの間に18文字あるという意味）と省略され
ます。HTML4ではRFC2070を統合してHTMLを国際化しているため、これらのアトリ
ビュートを指定することができます。i18nのアトリビュートにはlangとdirがあり
ます。

○lang

　langアトリビュートはlang="ja"のように言語コードをバリューにとり、エレメ
ントのコンテントがどういった言語で書かれたものなのかということをユーザー
エージェントに伝えます。もしエレメントにlangが指定されていない場合は親要
素から言語情報を継承します。

○dir

　dirアトリビュートはltrかrtlをバリューとしてとり、文字が左から始まる（l
tr）のか、右から始まる（rtl）のかをユーザーエージェントに伝えます。西洋諸
国語や日本語などは文字は左から始まりますが、アラビア語などは右から書きま
すので、日本語の段落の中にアラビア語を含める場合などに指定することになり
ます。

●コアアトリビュート

　id、class、style、titleがコアアトリビュートに含まれます。これらはHTML4
ではほとんどすべてのエレメントに指定することができます。

○id

　エレメントに固有のIDをつけます。スタイルシートやスクリプトの対象になっ
たり、リンクのアンカーになったりします。IDはひとつの文書中に重複してつけ
ることはできません。idのバリューにはアルファベットから始まり、それに続く
数字、"-"、"_"、":"、"."が指定できます。これらは大文字小文字で識別されま
す。

○class

　エレメントにクラス名をつけます。主にスタイルシートの対象として用いられ
ることがほとんどです。文書中に何度でも出現可能であり、ひとつのエレメント
にスペースで区切って複数のクラス名をつけることも可能です。classのバリュー
にはHTML2.xでは英数字と "."、"-"のみが使えましたが、HTML4では制限がなくな
っています。

○style

　スタイルシートを直接エレメントに指定するためのアトリビュートです。詳し
くはCSSの説明で述べますが、カスケーディングの最下層になります。CSSの利点
を崩すことになりかねないので、できる限りこのアトリビュートは使わないほう
がいいでしょう。ちなみにこのアトリビュートを使うときはヘッド部分で<META 
http-equiv="Content-Style-Type" content="text/css">を指定する必要がありま
す。

○title

　エレメントにタイトルをつけます。タイトルは読み上げられたり、カーソルを
持っていったときに表示されたりすることが予想されます。わかりにくいエレメ
ントには積極的に利用して細く情報を付けるようにしましょう。

●イベントアトリビュート

　スクリプトなどを使った動的なWebサイトを作る際に、イベントアトリビュート
にある事象が発生したときにイベントアトリビュートのバリューのスクリプトが
実行されます。
　著者であるDefolsoがスクリプトは所詮プラグインであるなどの理由からスクリ
プトの使用に否定的であるため、動的なWEBサイトについてはここでは言及しませ
ん。ですので今回は省略させていただきます。


■0x08.) 非推奨と廃止

　HTMLにはバージョンがあり、バージョンによって使うことができるエレメント
やアトリビュート、それらを配置してよい場所などが異なります。前のバージョ
ンで採用されていたのに新しいバージョンでは採用されなかったエレメントやア
トリビュートは廃止されたことになり、今後の新しいバージョンでも出現するこ
とは基本的になくなります。
　一方、非推奨は今後廃止される可能性があり、使うべきではないとされるもの
です。非推奨となるにはいくつかの条件があります。

1：物理的に見栄えを指定するだけの要素や属性である
2：スタイルシートで代用可能である

　これらの条件に合致するものは非推奨となりますが、W3Cの仕様書では後方互換
のためにブラウザベンダは非推奨となったエレメントやアトリビュートにも対応
するべきだと言及されています。それゆえにブラウザでは非推奨のエレメントな
ども表示できたりしますが、将来廃止されたとき書き直す手間が増えたり、グラ
フィカルなブラウザにしか情報が伝わらなかったりと不利益しか得ることができ
ません。出来る限り非推奨となったものは使わないようにしましょう。

　例として非推奨の代表格、fontエレメントを例にとって解説しましょう。font
エレメントはネットスケープブラウザが独自拡張したエレメントでしたが、HTML
3.2で正式採用され、HTML4.0で非推奨となりました。<font color="red">などの
ようにアトリビュートを指定することで文字の色を変えたり、<font size="1">の
ように文字の大きさを変えたりすることができます。一見便利そうに見えますが、
このエレメントには多くの弊害があります。
　fontエレメントはそれ自体が論理的な意味を持たないエレメントです。次のソ
ースをご覧ください。

-----
<p>
ポートスキャンは<font color="red">不正アクセス予備行為</font>
となることがあります。
</p>
-----

　上記のソースをグラフィカルブラウザ以外でアクセスした場合、赤い色という
だけの情報では強調を表しているのか引用なのか気まぐれで赤くしたのか判断で
きなくなってしまいます。もし仮にこれが強調したいために赤くしたのだとすれ
ば、次のように書くことでグラフィカルブラウザ以外でも情報が伝わります。

-----
<p>
ポートスキャンは<em style="color:red">不正アクセス予備行為</em>
となることがあります。
</p>
-----

　上記の例はfontエレメントで色を指定した場合と同じように表示されますが、
グラフィカルブラウザ以外でアクセスした場合でもブラウザが強調を表している
ことを読み取り、強調だと分かるように、大きな声で読み上げたり文字を括弧で
くくったり、しかるべき出力を行ってくれます。
　非推奨とされるものはこのようにスタイルシートで代用が可能です。出来る限
り論理要素＋スタイルシートでマークアップするようにしましょう。
　このレポートの次の章では実際のソースを例としてエレメントやアトリビュー
トの使い方を解説していきますが、非推奨となったエレメントやアトリビュート
は紹介しません。これは非推奨となったものを知らなくても正当なHTMLを記述す
ることができるからです。本来、非推奨のものも知っておくことは大切ですが紙
面の都合上、愛割とさせていただきます。


■0x09.) 実際のコーディング

　それでは実際のソースコードを元にエレメントやアトリビュートなどの解説を
行っていきましょう。次のサンプルは「ハッキングラボラトリ」のWebサイトです。
html、head、meta、title、body、div、spanエレメントと共通アトリビュートは
すでに解説済みなため省略します。

●index.html

-----
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
 "http://www.w3.org/TR/html4/strict.dtd">
<html lang="ja">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=SHIFT_JIS">
<meta http-equiv="Content-Language" content="ja">
<meta name="keywords" content="ハッキング,プログラミング,hacking" lang="ja">
<meta name="description" content="ハッキング技術についての解説を行うWEBサイト">
<title>ハッキングラボラトリ - トップページ</title>
</head>
<body>
<h1>ハッキングラボラトリ トップページ<h1>

<hr title="ここからメニュー">

<h2>メニュー</h2>
<ul>
<li><a href="about.html">このサイトについて</a></li>
<li><a href="hack.html">ハッキング技術</a></li>
<li><a href="source.html">ソースコード</a></li>
</ul>

<hr title="ここからコンテンツ">

<h2>あいさつ</h2>
<p>
ようこそいらっしゃいました。これは私の<em>はじめての</em>WEBサイトです。
まず始めに<a herf="about.html">このサイトについて</a>をお読みください。
</p>

</body>
</html>
-----

○h1, h2, h3, h4, h5, h6 (Headings level 1-6)

　見出しとそのレベルを表します。h1が最も重要な見出しで数字が下がるにした
がって重要さが低い見出しになります。決して文字の大きさを表すエレメントで
はありません。
　ブロックレベルエレメントで開始タグ、終了タグともに必須です。コンテント
はインラインのみです。

○hr (Horizontal Rule)

　水平線を配置します。水平線はどういった目的で引かれているかわかりにくい
ため、titleアトリビュートで補足することが勧められます。
　ブロックレベルエレメントで開始タグは必須、終了タグを書くことは禁止され
ています。

○ul (Unordered List)

　順不同のリストを定義します。順序つきリストを定義する場合はolエレメント
を使います。ulはリスト定義だけですので、項目は別に定義する必要があります。
項目を定義するにはliを使います。
　ブロックレベルエレメントで開始タグ、終了タグともに必須です。コンテント
はひとつ以上のliエレメントだけです。最低でもひとつliエレメントが必要なた
め、ulエレメントだけが出現することもできません。

○li (List Item)

　リスト項目を表します。単体で用いることはできず、ul、olエレメントのコン
テントとしてのみ現れます。
　ブロックレベルエレメントで開始タグは必須、終了タグは省略可能ですが省略
するべきではないでしょう。コンテントはブロックレベルとインラインです。

○a (Anchor)

　ハイパーテキストの最大の特徴であるリンクを実現するエレメントで、アンカ
ーを表します。よく利用されるアトリビュートには次のようなものがあります。

・href
　リンク先のURIを指定します。

・name
　リンク元となるアンカー名を指定します。idアトリビュートも同じように使用
することができます。

・hreflang
　リンク先の言語を明示します。

・type
　リンク先のMIMEタイプを明示します。リンクはHTML文書だけに限らず、画像や
動画などにも設定できるため、MIMEタイプを明示するアトリビュートがあります。

・charset
　リンク先の文字セットを明示します。

・rel
　この文書から見たリンク先の文書の関係を指定します。例えばシリーズになっ
ているなら、ひとつ前の文書などです。

・rev
　リンク先の文書から見たこの文書の関係を指定します。例えば例えばシリーズ
になっているなら、ひとつ先の文書などです。

・tabindex
　タブを押したときのリンクがフォーカスされる順番を指定します。1から数字が
小さい順にフォーカスされます。詳細はいずれ、アクセシビリティについてで解
説します。

・accesskey
　リンクに[アクセスキー]＋[英字１文字]でリンクをクリックした時と同じよう
にアクセスすることができるショートカットを指定します。詳細はいずれ、アク
セシビリティについてで解説します。

　リンクはWWWの基本概念として勝手にどこにでもはるものなので、決して「リン
クは勝手にはらないでください」などと書かないでください。WWWの考案者である
Tim Berners-Leeは「Links and Law: Myths」の中で、「リンクは著作権を侵すも
のではなく、事前報告は必要ない」、「リンクになんらかの支払いを求めてはな
らない」、「リンクは他人のプライバシーを侵害することはない」と結論付けて
います。詳しくはLinks and Law: Myths（http://www.w3.org/DesignIssues/Lin
kMyths.html）を参照してください。
　インラインエレメントで開始タグ、終了タグともに必須です。コンテントはaエ
レメントを除くインラインです。

○p (Paragraph)

　段落を表します。pエレメントで囲んだコンテントがひとつの段落になります。
コンテントはインラインのみなので、<p><hr></p>ような書き方は文法違反です。
　ブロックレベルエレメントで開始タグは必須、終了タグは省略可能ですが省略
するべきではないでしょう。コンテントは前述の通りインラインのみです。

●about.html

　次にabout.htmlを見て見ましょう。

-----
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
 "http://www.w3.org/TR/html4/strict.dtd">
<html lang="ja">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=SHIFT_JIS">
<meta http-equiv="Content-Language" content="ja">
<title>ハッキングラボラトリ - このサイトについて</title>
</head>
<body>
<h1>ハッキングラボラトリ このサイトについて<h1>

<hr title="ここからコンテンツ">

<h2>概要</h2>
<p>
このサイトはHTMLの解説用に作られたサイトです。主にハッキング技術とゴミプログラムのソースを公開しています。
</p>

<h2>リンクとバナー</h2>
<p>
リンクは<abbr title="World Wide Web">WWW</abbr>の発案者
Tim Berners-Leeの主張に従って、どこでも<em>ご自由に</em>どうぞ。
報告も<strong>必要ありません</strong>。
バナーは次のものを用意しております。<br>
<img src="banna.jpg" alt="バナー" height=60 width=180>
</p>

</body>
</html>
-----

○abbr (Abbreviation)
　コンテントが省略された文字であることを明示します。titleアトリビュートで
フルスペルを記述しておきましょう。コンピュータ技術には略語が多いので、非
常によく使われるエレメントです。
　インラインエレメントで開始タグ、終了タグともに必須です。コンテントはイ
ンラインのみです。

○em (Emphasis)
　強調を表します。ちょっと強めに読むような感じです。
　インラインエレメントで開始タグ、終了タグともに必須です。コンテントはイ
ンラインです。

○strong (Strong Emphasis)
　とても強い強調を表します。叫ぶような感じです。
　インラインエレメントで開始タグ、終了タグともに必須です。コンテントはイ
ンラインです。

○br (Forced Line Break)
　強制改行を行います。通常ブラウザは適切な位置で自動的に改行してくれます
が、それ以外で改行したい場合に用います。例えば同じ段落中で改行したい場合
や詩を書く場合などです。決して一行空けるためにbrを連発しないでください。
　インラインエレメントで開始タグは必須、終了タグを書くことは禁止されてい
ます。

○img (Embedded Image)
　インラインの画像を埋め込みます。srcとaltは必須アトリビュートで、それぞ
れ画像のURIと代替テキストを指定します。代替テキストは文字ブラウザや画像取
得エラーなどで画像が表示できない場合に表示されるテキストです。この2つ以外
では次のようなアトリビュートが主に用いられます。

・longdesc
　URIをバリューにとり、より詳しい説明へのリンクを指定します。

・height
　画像の高さを明示します。高さと横幅は指定するほうがよいとされています。

・width
　画像の横幅を明示します。高さと横幅は指定するほうがよいとされています。

　インラインエレメントで開始タグは必須、終了タグを書くことは禁止されてい
ます。

●hello.html

-----
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
 "http://www.w3.org/TR/html4/strict.dtd">
<html lang="ja">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=SHIFT_JIS">
<meta http-equiv="Content-Language" content="ja">
<title>ハッキングラボラトリ - ソース - 挨拶プログラム</title>
</head>
<body>
<h1>ハッキングラボラトリ 挨拶プログラム<h1>

<hr title="ここからコンテンツ">

<h2>概要</h2>
<p>挨拶します。char型のstring配列に文字列を格納し
<dnf><a href="#comment01">printf関数</a></dnf>で出力しています。</p>

<h2>ソース</h2>
<pre>
<code title="挨拶プログラムのソース">
#include &lt;stdio.h&gt;
int main()
{
     char <var>string[]</var> = 'Hello, hackers!!';
     printf ("%s", <var>string</var>);
     return 0;
}
</code>
</pre>

<h2>実行</h2>
<p>このプログラムは次のように実行します。</p>
<p>$ <kbd>./hello.exe</kbd></p>

<p>実行結果は次のようになります。</p>
<p><samp>Hello, hackers!!</samp></p>

<h2>注釈</h2>
<h3 id="comment01">printf関数</h3>
<blockquote cite="http://ruffnex.oc.to/defolos/"><p>
標準入出力関数のひとつ。stdio.hをインクルードしておく必要がある。
</p></blockquote>

<p>参考文献:<cite>http://ruffnex.oc.to/defolos/test.html</cite></p>

</body>
</html>
-----

○&lt;、&gt;
　これは文字参照のうちの文字実体参照です。特殊な文字はそのままではソース
中に書くことができないので、このような文字参照を利用します。文字参照はユ
ーザーエージェントで表示されるときには文字参照が指し示す文字に置き換えら
れています。この例ではそれぞれ<と>に置き換えられます。文字参照には数値文
字参照と呼ばれる&文字番号;のように文字番号で指定する方法と文字実体参照と
呼ばれる&文字実体;のように文字実体で指定する方法の2通りあります。アルファ
ベットの「a」を指定する場合、文字番号で指定すると&#229;のように何を表して
いるか一見わかりませんが、文字実体で指定すると&aring;のようにわかりやすく
なります。
　詳細はW3Cの24 Character entity references in HTML 4（http://www.w3.org
/TR/html4/sgml/entities.html）を参照してください。

○dnf (Defining Term)
　他の場所で定義されている用語であることを表します。注釈などに用いものだ
と思っています。
　インラインエレメントで開始タグ、終了タグともに必須です。コンテントはイ
ンラインのみです。

○pre (Preformatted Text)
　整形済みのテキストであることを表し、改行やスペースをそのまま表示します。
preの中でもマークアップは有効なため、次のようにマークアップすることができ
ます。

-----
<pre>
クラッカーはハッカーと違い、<em>破壊活動</em>や
<strong>非生産的</strong>なことに技術を使う。
<pre>
-----

　ブロックレベルエレメントで開始タグ、終了タグともに必須です。コンテント
はインラインですが、imgやsub（上付き文字）などの整形済みという概念に反す
るエレメントは書けません。また、コンテントにタブ文字を書くことは非推奨で
す。

○code (Computer Code)
　このエレメントはハッカーの方に是非活用してほしいエレメントです。コンピ
ュータプログラムのソースコードを表すエレメントです。
　インラインエレメントで開始タグ、終了タグともに必須です。コンテントはイ
ンラインのみです。

○var (Variable)
　プログラムの変数のように値が変わり得るものを表します。ソースの解説など
で用います。
　インラインエレメントで開始タグ、終了タグともに必須です。コンテントはイ
ンラインのみです。

○kbd (Keyboard)
　キーボードからの入力を表します。ソフトの使い方解説などでユーザが入力す
る部分に使います。
　インラインエレメントで開始タグ、終了タグともに必須です。コンテントはイ
ンラインのみです。

○samp (Sample)
　プログラムなどの出力サンプルを表します。コードのサンプルはcodeエレメン
トを用います。これもコンピュータ技術の解説などではよく用いられるエレメン
トです。
　インラインエレメントで開始タグ、終了タグともに必須です。コンテントはイ
ンラインのみです。

○cite (Citation)
　他の権文献からの引用や参考などの出典を表します。文献名やURIなどがコンテ
ントになり、論文やレポートで用いるべきものでしょう。
　インラインエレメントで開始タグ、終了タグともに必須です。コンテントはイ
ンラインのみです。

○blockquote (Long Quotation)
　引用文を表します。句の引用を表す場合はqエレメントを使います。ブラウザの
中にはインデントで表示するものがありますが、インデント目的でこのエレメン
トを使うと環境によっては「次の文章は引用です」と表示される可能性もありま
す。また、コンテントはbodyエレメントと同じなので直接文章を書くことはでき
ません。指定できるアトリビュートには次のようなものがあります。

・cite
　引用の出典を記載します。文献名やURIを記述することになります。

　ブロックエレメントで開始タグ、終了タグともに必須です。コンテントはブロ
ックレベルエレメントとSCRIPTです。

●hack.html

-----
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
 "http://www.w3.org/TR/html4/strict.dtd">
<html lang="ja">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=SHIFT_JIS">
<meta http-equiv="Content-Language" content="ja">
<title>ハッキングラボラトリ - ハッキング技術</title>
</head>
<body>
<h1>ハッキングラボラトリ ハッキング技術<h1>

<hr title="ここからコンテンツ">

<h2></h2>
<dl>
<dt>ポートスキャン</dt>
<dd><p>
ホストのどのポートが開いているかを調べることで、そのホストがどういったサービスを提供しているのかを予測します。クラッキングの予備調査としての位置付けで法律に触れる恐れもあります。
</p></dd>

<dt>スニッフィング</dt>
<dd><p>
ネットワーク上を流れるパケットを盗聴する行為です。TELNETなど平文で通信を行うプロトコルでスニッフィングだけでパスワードが盗まれる危険性もあります。
</p></dd>

<dt>ソーシャルエンジニアリング</dt>
<dd><p>
電話などで巧妙な身分偽証と口先のテクニックで相手をだまし、必要な情報を入手する行為です。Glazheim Lykeionでは次のように表現しています。<q cite="http://ruffnex.oc.to/defolos/social.html">ソーシャルエンジニアリングとは巧妙な詐欺のようなものである</q>さらにゴミ漁りやピッキングなどもこれに分類されます。
</p></dd>
</dl>
</body>
</html>
-----

○dl (Definition List)
　定義型のリストを定義します。定義型とは例のように、ある用語についての解
説などのように、用語と解説が交互に出てくるようなリストのことです。
　ブロックレベルエレメントで開始タグ、終了タグともに必須です。コンテント
はひとつ以上のdtあるいはddです。

○dt (Definition Term)
　定義型リストの用語の部分を表します。dlのコンテントとしてのみ出現します。
　開始タグは必須、終了タグは省略可能ですが省略するべきではないでしょう。
コンテントはインラインのみです。

○dd (Definition Description)
　定義型リストの解説の部分を表します。dlのコンテントとしてのみ出現します。
　　開始タグは必須、終了タグは省略可能ですが省略するべきではないでしょう。
コンテントはブロックレベルエレメントとインラインです。

○q (Quotation)
　引用句を表します。グラフィカルなユーザエージェントではコンテントの言語
に応じた引用符で囲まれて表示されるはずです。例えば日本語の場合引用符は「
」です。また、二重に引用されることもあり、その場合も正しい引用符の関係で
囲まれることになります。

・デカルトの言葉に「我思う故に我はあり」という言葉があります。
・その文献で「カエサルはルビコン川を渡る前に『賽は投げられた』と言った」
という文章を見た。

　仮に言語が英語であった場合は次のようになります。

・Descartes said "Cogito Ergo Sum".
・I saw "Caesar said 'Iacta alea est' before he across The Rubicon" in the book.

　指定できるアトリビュートは次のようなものがあります。

・cite
　引用の出典を記載します。文献名やURIを記述することになります。

　インラインエレメントで開始タグ、終了タグともに必須です。コンテントはイ
ンラインです。


■0x0A.) 参考文献

・「HTML 4.01 Specification」
http://www.w3.org/TR/html4/

・「Some early ideas for HTML」
http://www.w3.org/MarkUp/historical

・「HTML鳩丸倶楽部」
http://www.ne.jp/asahi/minazuki/bakera/html/hatomaru

・「Project Xanadu」
http://xanadu.com/

・「URIとファイルディレクトリ -- ごく簡単なHTMLの説明」
http://www.kanzaki.com/docs/html/htminfo-uri.html

・「大阪市立大学 インターネット講座　第12回デジタル技術時代のテクスト(3) ハイパーテクストとテクスト」
http://www.tufs.ac.jp/ts/personal/yamaguci/inet_lec/lec12/98med12.html

・「XaQ JP」
http://web.sfc.keio.ac.jp/~yukihiko/XaS/XaQjp.html


■0x0B.) さいごに

　皆様、いかがでしたでしょうか。HTMLは学術的な歴史を持ち、仕様書が公開さ
れているにもかかわらず不適切な内容の書籍が多く、正確な文法を知ることは難
しいです。学術的な歴史を重んじてHTML文書を作成するために、このレポートを
役立てていただけると幸いです。
　今回はHTMLについて基本的なところを執筆しましたが、大体の場合ここで取り
上げた知識だけで正当なHTML文書を作成することができます。しかし、今回取り
上げた部分はHTMLの仕様書のごく一部ですので、詳しくはW3CのHTML Specificat
ionを参照してください。次回は今回のレポートで触れることができなかった、よ
り細かい技術やアクセシビリティについて執筆したいと思います。
　それではまたお会いしましょう。

