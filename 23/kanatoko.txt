x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x

--- 第2章: SQLインジェクションに対するインチキ防御 ---

著者：金床

x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x


■0x01.) はじめに

　以前書いたhostsファイルの名前変更と似たようなネタである。またしてもイン
チキ的発想による我流小細工防御テクニックを編み出してしまったので、懲りず
に公開したいと思う。題名の通り、今回のテクニックはSQLインジェクション攻撃
に対する防御として使用できるものだ。SQLインジェクション攻撃はデビュー以来、
特に日本国内ではぱっとしない扱いだったものの、今年になって発生したカカク
コ○（一部伏せ字）の改竄・及び個人情報流出事件で一躍スターダムにのし上が
った、ウェブアプリケーションに対する攻撃手法の一種である。多くのケースで
はデータベースの中身をウェブアプリケーション経由で盗まれたり改竄されたり
する他、カ○クコム（一部伏せ字）のようにMicrosoftのSQL Serverを使っている
場合には、xp_cmdshellというとっても（クラッカーにとって）便利な機能によっ
てOSのコマンドが実行され、その結果ウェブサイトの改竄が行われたりもしてし
まう。破壊力の大きさでは他を寄せ付けない、非常に避けたい攻撃のひとつだ。
ちなみにこの記事で出てくる「クラッカー」という用語は悪質なコンピュータ犯
罪者を指すものであり、「どーも○×△です」などと名乗るタコ焼きが好きな人
たちのことではないので注意されたい。


■0x02.) コンセプト

　多くのソフトウェアやプロトコルでは次々に機能拡張が行われ、多機能でとて
も便利な方向へと開発が進められていく。しかしこの「便利」がくせ者で、ユー
ザにとって便利であるよう設計された機能が、クラッカーにとっても激しく便利
になっていることが多々ある。ひどい場合には正規のユーザが殆ど使用しないの
に、クラッカーによる侵入の際には定番の機能として使用されるようなものも存
在する。例えばHTTPのTRACEメソッド。こんなもの、普通のユーザはまず使わない。
にも関わらずApacheなどのWebサーバーは丁寧に実装してしまっているために、今
流行のAjaxで使用されるXMLHttpRequest（だったかな）と組み合わせてCross Si
te Tracingという新たな攻撃手法が編み出されてしまった。また、先述のxp_cmd
shellなども同じく普通は使われないのに（使わないよね？）クラッカーにとって
は侵入のための決定的な武器となってしまっている。
　このような機能は、自分が使っているソフトウェアからは削除したい。多少不
便でもセキュアな方がイイ！これが基本的なコンセプトである。


■0x03.) 今回削除する機能はUNIONだ

　さて今回削除する機能は、SQL文で使うことのできる「UNION」キーワードであ
る。元町にあるスーパーではないし、ましてやディスクUNIONでもない。最近行っ
てないなぁディスクUNION。
　さてUNIONは複数のselect文の結果を統合するために使われる。最も簡単な例は
次のようなものだ。

-----
mysql> select 1 union select 2 union select 3;
+---+
| 1 |
+---+
| 1 |
| 2 |
| 3 |
+---+
3 rows in set (0.00 sec)
-----

　漏れはデータベースについては初心者に毛が生えたくらいのスキルしか持って
いないのでそのせいかもしれないが、はっきりいって使わないです。UNION。SEL
ECT文は統合しないです。データベースハカーになるとUNION乱発したりするのだ
ろうか。とにかく漏れは使わない。そしてこのUNIONという機能、SQLインジェク
ション攻撃を実りあるものにするための、クラッカーにとって欠かせない機能と
なってしまっているのだ。SQLインジェクション攻撃の際にUNIONがどのように使
われるかについてはネット上に豊富にある文献を参照してもらうとして、とにか
くこのUNIONという物騒な機能を自分のシステムから削除したい。今回削除する対
象となるシステム（データベース）は、共にオープンソースでシェアも高いMySQ
LとPostgreSQLだ。ちなみにMySQLは古いバージョンではそもそもUNIONの機能がサ
ポートされておらず、そのせいでSQLインジェクション攻撃に対する耐性が高くセ
キュアだと評価されていたりする。しかし最近のバージョンではしっかりサポー
トされており、他のデータベースと同様にSQLインジェクション攻撃の際にクラッ
カーに使用されてしまう運命を辿りつつある。


■0x04.) PostrgeSQLからUNIONを除去

　まずPostgreSQLの場合である。ちなみに手元で試したのは多少古いバージョン
なので、最近の新しいやつでも同様に除去できるかどうかは分からない。
　PostgreSQLのソースを展開すると、src/backend/parserというディレクトリに
keywords.cというファイルがある。このファイルには、次のようにデータベース
エンジンがSQL文を解釈していく時に使われる、各種のキーワードが定義されてい
る。

-----
static ScanKeyword ScanKeywords[] = {
        /* name, value */
        {"abort", ABORT_TRANS},
        {"absolute", ABSOLUTE},
        {"access", ACCESS},
        {"action", ACTION},
        {"add", ADD},
...（略)
-----

　この中に{"union", UNION},という行があるので、この行を変更すれば良い。例
えば {"onion", UNION},と変更すれば、UNIONの代わりにONIONというキーワード
が使用できる、非常にイカしたPostgreSQLの出来上がりだ。キーワードを自分し
か知らないものに変更する方法でも良いし、あるいはこの行をさっくり削除して
も良いかもしれない。ちなみに注意点として、キーワードを変更する際には配列
がアルファベット順にソートされた状態を保つようにすること。また、漏れは対
象の行を削除する方法は試していないので、削除しても正しく機能するかどうか
は分からない。
　UNIONの行を変更（もしくは削除）したら再度makeし、src/backend内に生成さ
れるバイナリpostgresを現在使用しているものと置き換えて、データベースを再
起動する。これでUNIONの除去が完了する。


■0x05.) MySQLからUNIONを除去

　次にMySQLの場合だ。手元ではバージョン4.1.15を使った。バージョン5系列な
どで同じ方法が使えるかどうかは分からない。また、先述の通り古いバージョン
ではそもそもUNIONがサポートされていないので、除去する必要はない。
　MySQLのソースを展開すると、sqlというディレクトリにlex.hというファイルが
ある。PostgreSQLのkeyword.cと同様に、このファイルに各キーワードが定義され
ている部分がある。

-----
static SYMBOL symbols[] = {
  { "&&",               SYM(AND_SYM)},
  { "<",                SYM(LT)},
  { "<=",               SYM(LE)},
  { "<>",               SYM(NE)},
  { "!=",               SYM(NE)},
  { "=",                SYM(EQ)},
...（略）
-----

　ここでは「{ "UNION",            SYM(UNION_SYM)},」という行が目的の部分
になる。UNIONをONIONなどに変えたら、再度makeする。そしてsqlディレクトリ内
に生成されるmysqldを現在使用しているものと置き換え、データベースを再起動
すれば出来上がりだ。


■0x06.) まとめ

　このように、PostgreSQLとMySQLから、非常に手軽にUNION機能の削除を行うこ
とができた。漏れはクラッカーでは無いが、ウェブアプリのセキュリティを検査
する際には当然、攻撃者の視点で作業する。この時のクラッカー的視点から考え
ると、やはりUNIONが削除されていると大分違う。小細工には違いないが、それな
りに効果のある方法ではないかと思う。
　オープンソースソフトウェアのソースコードを自分でいじるということは敷居
が高く感じるかもしれないが、「機能の削除」という観点から手を加えてみると、
比較的簡単であることに気付く。このように自由に手を加えて遊べることは、無
料で使えることと同じく、オープンソースソフトウェアを使う上での大きなメリ
ットである。享受されたし。


